/*
 * generated by Xtext 2.14.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.services.MQLGrammarAccess;
import qmm.AdditionalInformation;
import qmm.AdditionalInformation_OrGroup;
import qmm.And_EvaluationBitOperator;
import qmm.Attribute;
import qmm.AttributeDataType_CalculateableElementReferenceArgument;
import qmm.AttributeDataType_CalculateableParameter;
import qmm.AttributeDataType_FunctionalParameter;
import qmm.AttributeFamily;
import qmm.AttributeLib;
import qmm.AttributeLib_OrGroup;
import qmm.AttributeNameMapping;
import qmm.AttributeNameMapping_OrGroup;
import qmm.AttributeNameMapping_roleAttributeName_AttrEClass;
import qmm.AttributeNameMapping_systemUnitAttributeName_AttrEClass;
import qmm.AttributeValueRequirement;
import qmm.AttributeValueRequirement_OrGroup;
import qmm.AttributeValueRequirement_name_AttrEClass;
import qmm.Attribute_OrGroup;
import qmm.Attribute_attributeDataType_AttrEClass;
import qmm.Attribute_defaultValue_AttrEClass;
import qmm.Attribute_refAttributeType_AttrEClass;
import qmm.Attribute_unit_AttrEClass;
import qmm.Attribute_value_AttrEClass;
import qmm.Boolean_And_BitOperator;
import qmm.Boolean_CalculateableParameter;
import qmm.Boolean_FunctionalParameter;
import qmm.Boolean_Or_BitOperator;
import qmm.CAEXBasicObject;
import qmm.CAEXBasicObject_changeMode_AttrEClass;
import qmm.CAEXFile;
import qmm.CAEXFile_OrGroup;
import qmm.CAEXFile_fileName_AttrEClass;
import qmm.CAEXFile_schemaVersion_AttrEClass;
import qmm.CAEXFile_superiorStandardVersion_AttrEClass;
import qmm.CAEXObject;
import qmm.CAEXObject_iD_AttrEClass;
import qmm.CAEXObject_name_AttrEClass;
import qmm.ChangeMode_EnumerationOperator;
import qmm.CharSequence_And_BitOperator;
import qmm.CharSequence_CalculateableParameter;
import qmm.CharSequence_FunctionalParameter;
import qmm.CharSequence_Or_BitOperator;
import qmm.CharSequence_String_Object_CharSequence_equals_FunctionalOperator;
import qmm.CharSequence_String_Object_CharSequence_toString_FunctionalOperator;
import qmm.CharSequence_String_length_FunctionalOperator;
import qmm.Character_And_BitOperator;
import qmm.Character_CalculateableParameter;
import qmm.Character_FunctionalParameter;
import qmm.Character_Or_BitOperator;
import qmm.Copyright;
import qmm.Copyright_OrGroup;
import qmm.Copyright_changeMode_AttrEClass;
import qmm.Copyright_value_AttrEClass;
import qmm.Count_AggregationOperator;
import qmm.CountableReferenceParameter;
import qmm.Countable_ReferenceArgument;
import qmm.DateTime_CalculateableElementReferenceArgument;
import qmm.DateTime_CalculateableParameter;
import qmm.DateTime_FunctionalParameter;
import qmm.Description;
import qmm.Description_OrGroup;
import qmm.Description_changeMode_AttrEClass;
import qmm.Description_value_AttrEClass;
import qmm.DocumentRoot;
import qmm.DocumentRoot_mixed_AttrEClass;
import qmm.Double_And_BitOperator;
import qmm.Double_CalculateableParameter;
import qmm.Double_FunctionalParameter;
import qmm.Double_Or_BitOperator;
import qmm.EFeatureMapEntry_CalculateableElementReferenceArgument;
import qmm.EFeatureMapEntry_CalculateableParameter;
import qmm.EFeatureMapEntry_FunctionalParameter;
import qmm.Element;
import qmm.Element_name_AttrEClass;
import qmm.Element_value_AttrEClass;
import qmm.ExternalInterface;
import qmm.ExternalInterface_OrGroup;
import qmm.ExternalReferenceType;
import qmm.ExternalReferenceType_OrGroup;
import qmm.ExternalReferenceType_alias_AttrEClass;
import qmm.ExternalReferenceType_path_AttrEClass;
import qmm.FindQuery;
import qmm.Float_And_BitOperator;
import qmm.Float_CalculateableParameter;
import qmm.Float_FunctionalParameter;
import qmm.Float_Or_BitOperator;
import qmm.GenericAttribute;
import qmm.GenericAttribute_OrGroup;
import qmm.GenericElement;
import qmm.GenericElement_OrGroup;
import qmm.GenericElement_attributeFeatureMap_AttrEClass;
import qmm.GenericElement_elementFeatureMap_AttrEClass;
import qmm.InstanceHierarchy;
import qmm.InstanceHierarchy_OrGroup;
import qmm.IntegerParseInt_ClassOperator;
import qmm.Integer_And_BitOperator;
import qmm.Integer_CalculateableParameter;
import qmm.Integer_FunctionalParameter;
import qmm.Integer_Or_BitOperator;
import qmm.Integer_PrimitiveArgument;
import qmm.InterfaceClass;
import qmm.InterfaceClassLib;
import qmm.InterfaceClassLib_OrGroup;
import qmm.InterfaceClass_OrGroup;
import qmm.InterfaceClass_refBaseClassPath_AttrEClass;
import qmm.InterfaceFamily;
import qmm.InterfaceIDMapping;
import qmm.InterfaceIDMapping_OrGroup;
import qmm.InterfaceIDMapping_roleInterfaceID_AttrEClass;
import qmm.InterfaceIDMapping_systemUnitInterfaceID_AttrEClass;
import qmm.InternalElement;
import qmm.InternalElement_OrGroup;
import qmm.InternalElement_refBaseSystemUnitPath_AttrEClass;
import qmm.InternalLink;
import qmm.InternalLink_OrGroup;
import qmm.InternalLink_refPartnerSideA_AttrEClass;
import qmm.InternalLink_refPartnerSideB_AttrEClass;
import qmm.Long_And_BitOperator;
import qmm.Long_CalculateableParameter;
import qmm.Long_FunctionalParameter;
import qmm.Long_Or_BitOperator;
import qmm.Mapping;
import qmm.Mapping_OrGroup;
import qmm.Max_AggregationOperator;
import qmm.Min_AggregationOperator;
import qmm.NominalScaledType;
import qmm.NominalScaledType_OrGroup;
import qmm.NominalScaledType_requiredValue_AttrEClass;
import qmm.Number_And_BitOperator;
import qmm.Number_CalculateableParameter;
import qmm.Number_Double_Object_Number_equals_FunctionalOperator;
import qmm.Number_Double_Object_Number_toString_FunctionalOperator;
import qmm.Number_Double_greaterEquals_FunctionalOperator;
import qmm.Number_Double_greaterThan_FunctionalOperator;
import qmm.Number_Double_smallerEquals_FunctionalOperator;
import qmm.Number_Double_smallerThan_FunctionalOperator;
import qmm.Number_Float_Object_Number_equals_FunctionalOperator;
import qmm.Number_Float_Object_Number_toString_FunctionalOperator;
import qmm.Number_Float_greaterEquals_FunctionalOperator;
import qmm.Number_Float_greaterThan_FunctionalOperator;
import qmm.Number_Float_smallerEquals_FunctionalOperator;
import qmm.Number_Float_smallerThan_FunctionalOperator;
import qmm.Number_FunctionalParameter;
import qmm.Number_Integer_Object_Number_equals_FunctionalOperator;
import qmm.Number_Integer_Object_Number_toString_FunctionalOperator;
import qmm.Number_Integer_greaterEquals_FunctionalOperator;
import qmm.Number_Integer_greaterThan_FunctionalOperator;
import qmm.Number_Integer_smallerEquals_FunctionalOperator;
import qmm.Number_Integer_smallerThan_FunctionalOperator;
import qmm.Number_Long_Object_Number_equals_FunctionalOperator;
import qmm.Number_Long_Object_Number_toString_FunctionalOperator;
import qmm.Number_Long_greaterEquals_FunctionalOperator;
import qmm.Number_Long_greaterThan_FunctionalOperator;
import qmm.Number_Long_smallerEquals_FunctionalOperator;
import qmm.Number_Long_smallerThan_FunctionalOperator;
import qmm.Number_Or_BitOperator;
import qmm.Object_And_BitOperator;
import qmm.Object_Boolean_equals_FunctionalOperator;
import qmm.Object_Boolean_toString_FunctionalOperator;
import qmm.Object_CalculateableParameter;
import qmm.Object_CharSequence_equals_FunctionalOperator;
import qmm.Object_CharSequence_toString_FunctionalOperator;
import qmm.Object_Character_equals_FunctionalOperator;
import qmm.Object_Character_toString_FunctionalOperator;
import qmm.Object_FunctionalParameter;
import qmm.Object_Number_equals_FunctionalOperator;
import qmm.Object_Number_toString_FunctionalOperator;
import qmm.Object_Or_BitOperator;
import qmm.Or_EvaluationBitOperator;
import qmm.OrdinalScaledType;
import qmm.OrdinalScaledType_OrGroup;
import qmm.OrdinalScaledType_requiredMaxValue_AttrEClass;
import qmm.OrdinalScaledType_requiredMinValue_AttrEClass;
import qmm.OrdinalScaledType_requiredValue_AttrEClass;
import qmm.QmmPackage;
import qmm.RefSemantic;
import qmm.RefSemantic_OrGroup;
import qmm.RefSemantic_correspondingAttributePath_AttrEClass;
import qmm.Revision;
import qmm.Revision_OrGroup;
import qmm.Revision_authorName_AttrEClass;
import qmm.Revision_comment_AttrEClass;
import qmm.Revision_newVersion_AttrEClass;
import qmm.Revision_oldVersion_AttrEClass;
import qmm.Revision_revisionDate_AttrEClass;
import qmm.RoleClass;
import qmm.RoleClassLib;
import qmm.RoleClassLib_OrGroup;
import qmm.RoleClass_OrGroup;
import qmm.RoleClass_refBaseClassPath_AttrEClass;
import qmm.RoleFamily;
import qmm.RoleRequirements;
import qmm.RoleRequirements_OrGroup;
import qmm.SourceDocumentInformation;
import qmm.SourceDocumentInformation_OrGroup;
import qmm.SourceDocumentInformation_lastWritingDateTime_AttrEClass;
import qmm.SourceDocumentInformation_originID_AttrEClass;
import qmm.SourceDocumentInformation_originName_AttrEClass;
import qmm.SourceDocumentInformation_originProjectID_AttrEClass;
import qmm.SourceDocumentInformation_originProjectTitle_AttrEClass;
import qmm.SourceDocumentInformation_originRelease_AttrEClass;
import qmm.SourceDocumentInformation_originVendorURL_AttrEClass;
import qmm.SourceDocumentInformation_originVendor_AttrEClass;
import qmm.SourceDocumentInformation_originVersion_AttrEClass;
import qmm.String_And_BitOperator;
import qmm.String_CalculateableElementReferenceArgument;
import qmm.String_CalculateableParameter;
import qmm.String_FunctionalParameter;
import qmm.String_Or_BitOperator;
import qmm.String_PrimitiveArgument;
import qmm.Sum_AggregationOperator;
import qmm.SupportedRoleClass;
import qmm.SupportedRoleClass_OrGroup;
import qmm.SupportedRoleClass_refRoleClassPath_AttrEClass;
import qmm.SystemUnitClass;
import qmm.SystemUnitClassLib;
import qmm.SystemUnitClassLib_OrGroup;
import qmm.SystemUnitClass_OrGroup;
import qmm.SystemUnitClass_refBaseClassPath_AttrEClass;
import qmm.SystemUnitFamily;
import qmm.UnknownType;
import qmm.UnknownType_OrGroup;
import qmm.UnknownType_requirements_AttrEClass;
import qmm.Version;
import qmm.Version_OrGroup;
import qmm.Version_changeMode_AttrEClass;
import qmm.Version_value_AttrEClass;
import qmm.charAt_FunctionalOperator;
import qmm.compareTo_FunctionalOperator;
import qmm.concat_FunctionalOperator;
import qmm.contains_FunctionalOperator;
import qmm.endsWith_FunctionalOperator;
import qmm.equalsIgnoreCase_FunctionalOperator;
import qmm.equals_FunctionalOperator;
import qmm.greaterEquals_FunctionalOperator;
import qmm.greaterThan_FunctionalOperator;
import qmm.indexOfString_FunctionalOperator;
import qmm.isEmpty_FunctionalOperator;
import qmm.length_FunctionalOperator;
import qmm.parseBoolean_FunctionalOperator;
import qmm.smallerEquals_FunctionalOperator;
import qmm.smallerThan_FunctionalOperator;
import qmm.substring_FunctionalOperator;
import qmm.toString_FunctionalOperator;

@SuppressWarnings("all")
public class MQLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MQLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QmmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QmmPackage.ADDITIONAL_INFORMATION:
				if (rule == grammarAccess.getAdditionalInformation_TypeRule()
						|| rule == grammarAccess.getElement_TypeRule()
						|| rule == grammarAccess.getGenericElement_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getAdditionalInformationRule()
						|| rule == grammarAccess.getAdditionalInformation_bodyRule()) {
					sequence_AdditionalInformation_body_AdditionalInformation_empty(context, (AdditionalInformation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAdditionalInformation_emptyRule()) {
					sequence_AdditionalInformation_empty(context, (AdditionalInformation) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ADDITIONAL_INFORMATION_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_additionalInformation_OrGroupRule()) {
					sequence_AttributeFamily_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeLib_additionalInformation_OrGroupRule()) {
					sequence_AttributeLib_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_additionalInformation_OrGroupRule()) {
					sequence_AttributeNameMapping_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeValueRequirement_additionalInformation_OrGroupRule()) {
					sequence_AttributeValueRequirement_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_additionalInformation_OrGroupRule()) {
					sequence_Attribute_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXBasicObject_additionalInformation_OrGroupRule()) {
					sequence_CAEXBasicObject_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXFile_additionalInformation_OrGroupRule()) {
					sequence_CAEXFile_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXObject_additionalInformation_OrGroupRule()) {
					sequence_CAEXObject_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_additionalInformation_OrGroupRule()) {
					sequence_ExternalInterface_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalReferenceType_additionalInformation_OrGroupRule()) {
					sequence_ExternalReferenceType_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstanceHierarchy_additionalInformation_OrGroupRule()) {
					sequence_InstanceHierarchy_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClassLib_additionalInformation_OrGroupRule()) {
					sequence_InterfaceClassLib_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_additionalInformation_OrGroupRule()) {
					sequence_InterfaceClass_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_additionalInformation_OrGroupRule()) {
					sequence_InterfaceFamily_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceIDMapping_additionalInformation_OrGroupRule()) {
					sequence_InterfaceIDMapping_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_additionalInformation_OrGroupRule()) {
					sequence_InternalElement_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_additionalInformation_OrGroupRule()) {
					sequence_InternalLink_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMapping_additionalInformation_OrGroupRule()) {
					sequence_Mapping_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRefSemantic_additionalInformation_OrGroupRule()) {
					sequence_RefSemantic_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRevision_additionalInformation_OrGroupRule()) {
					sequence_Revision_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClassLib_additionalInformation_OrGroupRule()) {
					sequence_RoleClassLib_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_additionalInformation_OrGroupRule()) {
					sequence_RoleClass_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_additionalInformation_OrGroupRule()) {
					sequence_RoleFamily_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_additionalInformation_OrGroupRule()) {
					sequence_RoleRequirements_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_additionalInformation_OrGroupRule()) {
					sequence_SupportedRoleClass_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClassLib_additionalInformation_OrGroupRule()) {
					sequence_SystemUnitClassLib_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_additionalInformation_OrGroupRule()) {
					sequence_SystemUnitClass_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_additionalInformation_OrGroupRule()) {
					sequence_SystemUnitFamily_additionalInformation_OrGroup(context, (AdditionalInformation_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.AND_EVALUATION_BIT_OPERATOR:
				sequence_And_EvaluationBitOperator(context, (And_EvaluationBitOperator) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getAttribute_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getAttributeRule()
						|| rule == grammarAccess.getAttribute_bodyRule()) {
					sequence_Attribute_body_Attribute_empty(context, (Attribute) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_emptyRule()) {
					sequence_Attribute_empty(context, (Attribute) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ATTRIBUTE_DATA_TYPE_CALCULATEABLE_ELEMENT_REFERENCE_ARGUMENT:
				sequence_AttributeDataType_CalculateableElementReferenceArgument(context, (AttributeDataType_CalculateableElementReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_DATA_TYPE_CALCULATEABLE_PARAMETER:
				sequence_AttributeDataType_CalculateableParameter(context, (AttributeDataType_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_DATA_TYPE_FUNCTIONAL_PARAMETER:
				sequence_AttributeDataType_FunctionalParameter(context, (AttributeDataType_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_FAMILY:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getAttribute_TypeRule()
						|| rule == grammarAccess.getAttributeFamily_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getAttributeFamilyRule()
						|| rule == grammarAccess.getAttributeFamily_bodyRule()) {
					sequence_AttributeFamily_body_AttributeFamily_empty(context, (AttributeFamily) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeFamily_emptyRule()) {
					sequence_AttributeFamily_empty(context, (AttributeFamily) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ATTRIBUTE_LIB:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getAttributeLib_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getAttributeLibRule()
						|| rule == grammarAccess.getAttributeLib_bodyRule()) {
					sequence_AttributeLib_body_AttributeLib_empty(context, (AttributeLib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeLib_emptyRule()) {
					sequence_AttributeLib_empty(context, (AttributeLib) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ATTRIBUTE_LIB_OR_GROUP:
				sequence_CAEXFile_attributeTypeLib_OrGroup(context, (AttributeLib_OrGroup) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_NAME_MAPPING:
				if (rule == grammarAccess.getAttributeNameMapping_TypeRule()
						|| rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getAttributeNameMappingRule()
						|| rule == grammarAccess.getAttributeNameMapping_bodyRule()) {
					sequence_AttributeNameMapping_body_AttributeNameMapping_empty(context, (AttributeNameMapping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_emptyRule()) {
					sequence_AttributeNameMapping_empty(context, (AttributeNameMapping) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ATTRIBUTE_NAME_MAPPING_OR_GROUP:
				sequence_Mapping_attributeNameMapping_OrGroup(context, (AttributeNameMapping_OrGroup) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_NAME_MAPPING_ROLE_ATTRIBUTE_NAME_ATTR_ECLASS:
				sequence_AttributeNameMapping_roleAttributeName_AttrEClass(context, (AttributeNameMapping_roleAttributeName_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_NAME_MAPPING_SYSTEM_UNIT_ATTRIBUTE_NAME_ATTR_ECLASS:
				sequence_AttributeNameMapping_systemUnitAttributeName_AttrEClass(context, (AttributeNameMapping_systemUnitAttributeName_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_VALUE_REQUIREMENT:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getAttributeValueRequirement_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getAttributeValueRequirementRule()
						|| rule == grammarAccess.getAttributeValueRequirement_bodyRule()) {
					sequence_AttributeValueRequirement_body_AttributeValueRequirement_empty(context, (AttributeValueRequirement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeValueRequirement_emptyRule()) {
					sequence_AttributeValueRequirement_empty(context, (AttributeValueRequirement) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ATTRIBUTE_VALUE_REQUIREMENT_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_constraint_OrGroupRule()) {
					sequence_AttributeFamily_constraint_OrGroup(context, (AttributeValueRequirement_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_constraint_OrGroupRule()) {
					sequence_Attribute_constraint_OrGroup(context, (AttributeValueRequirement_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ATTRIBUTE_VALUE_REQUIREMENT_NAME_ATTR_ECLASS:
				sequence_AttributeValueRequirement_name_AttrEClass(context, (AttributeValueRequirement_name_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_attribute_OrGroupRule()) {
					sequence_AttributeFamily_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeLib_attributeType_OrGroupRule()) {
					sequence_AttributeLib_attributeType_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_roleAttribute_OrGroupRule()) {
					sequence_AttributeNameMapping_roleAttribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_systemUnitAttribute_OrGroupRule()) {
					sequence_AttributeNameMapping_systemUnitAttribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_attribute_OrGroupRule()) {
					sequence_Attribute_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_attribute_OrGroupRule()) {
					sequence_ExternalInterface_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_attribute_OrGroupRule()) {
					sequence_InterfaceClass_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_attribute_OrGroupRule()) {
					sequence_InterfaceFamily_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_attribute_OrGroupRule()) {
					sequence_InternalElement_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_attribute_OrGroupRule()) {
					sequence_RoleClass_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_attribute_OrGroupRule()) {
					sequence_RoleFamily_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_attribute_OrGroupRule()) {
					sequence_RoleRequirements_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_attribute_OrGroupRule()) {
					sequence_SystemUnitClass_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_attribute_OrGroupRule()) {
					sequence_SystemUnitFamily_attribute_OrGroup(context, (Attribute_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ATTRIBUTE_ATTRIBUTE_DATA_TYPE_ATTR_ECLASS:
				sequence_Attribute_attributeDataType_AttrEClass(context, (Attribute_attributeDataType_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_DEFAULT_VALUE_ATTR_ECLASS:
				sequence_Attribute_defaultValue_AttrEClass(context, (Attribute_defaultValue_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_REF_ATTRIBUTE_TYPE_ATTR_ECLASS:
				sequence_Attribute_refAttributeType_AttrEClass(context, (Attribute_refAttributeType_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_UNIT_ATTR_ECLASS:
				sequence_Attribute_unit_AttrEClass(context, (Attribute_unit_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ATTRIBUTE_VALUE_ATTR_ECLASS:
				sequence_Attribute_value_AttrEClass(context, (Attribute_value_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_AND_BIT_OPERATOR:
				sequence_Boolean_And_BitOperator(context, (Boolean_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_CALCULATEABLE_PARAMETER:
				sequence_Boolean_CalculateableParameter(context, (Boolean_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_FUNCTIONAL_PARAMETER:
				sequence_Boolean_FunctionalParameter(context, (Boolean_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_OR_BIT_OPERATOR:
				sequence_Boolean_Or_BitOperator(context, (Boolean_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CAEX_BASIC_OBJECT:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getCAEXBasicObjectRule()
						|| rule == grammarAccess.getCAEXBasicObject_bodyRule()) {
					sequence_CAEXBasicObject_body_CAEXBasicObject_empty(context, (CAEXBasicObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXBasicObject_emptyRule()) {
					sequence_CAEXBasicObject_empty(context, (CAEXBasicObject) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.CAEX_BASIC_OBJECT_CHANGE_MODE_ATTR_ECLASS:
				sequence_CAEXBasicObject_changeMode_AttrEClass(context, (CAEXBasicObject_changeMode_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.CAEX_FILE:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXFile_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getCAEXFileRule()
						|| rule == grammarAccess.getCAEXFile_bodyRule()) {
					sequence_CAEXFile_body_CAEXFile_empty(context, (CAEXFile) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXFile_emptyRule()) {
					sequence_CAEXFile_empty(context, (CAEXFile) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.CAEX_FILE_OR_GROUP:
				sequence_DocumentRoot_cAEXFile_OrGroup(context, (CAEXFile_OrGroup) semanticObject); 
				return; 
			case QmmPackage.CAEX_FILE_FILE_NAME_ATTR_ECLASS:
				sequence_CAEXFile_fileName_AttrEClass(context, (CAEXFile_fileName_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.CAEX_FILE_SCHEMA_VERSION_ATTR_ECLASS:
				sequence_CAEXFile_schemaVersion_AttrEClass(context, (CAEXFile_schemaVersion_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.CAEX_FILE_SUPERIOR_STANDARD_VERSION_ATTR_ECLASS:
				sequence_CAEXFile_superiorStandardVersion_AttrEClass(context, (CAEXFile_superiorStandardVersion_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.CAEX_OBJECT:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getCAEXObjectRule()
						|| rule == grammarAccess.getCAEXObject_bodyRule()) {
					sequence_CAEXObject_body_CAEXObject_empty(context, (CAEXObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXObject_emptyRule()) {
					sequence_CAEXObject_empty(context, (CAEXObject) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.CAEX_OBJECT_ID_ATTR_ECLASS:
				sequence_CAEXObject_iD_AttrEClass(context, (CAEXObject_iD_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.CAEX_OBJECT_NAME_ATTR_ECLASS:
				sequence_CAEXObject_name_AttrEClass(context, (CAEXObject_name_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.CHANGE_MODE_ENUMERATION_OPERATOR:
				sequence_ChangeMode_EnumerationOperator(context, (ChangeMode_EnumerationOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_AND_BIT_OPERATOR:
				sequence_CharSequence_And_BitOperator(context, (CharSequence_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_CALCULATEABLE_PARAMETER:
				sequence_CharSequence_CalculateableParameter(context, (CharSequence_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_FUNCTIONAL_PARAMETER:
				sequence_CharSequence_FunctionalParameter(context, (CharSequence_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_OR_BIT_OPERATOR:
				sequence_CharSequence_Or_BitOperator(context, (CharSequence_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_STRING_OBJECT_CHAR_SEQUENCE_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_CharSequence_String_Object_CharSequence_equals_FunctionalOperator(context, (CharSequence_String_Object_CharSequence_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_STRING_OBJECT_CHAR_SEQUENCE_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_CharSequence_String_Object_CharSequence_toString_FunctionalOperator(context, (CharSequence_String_Object_CharSequence_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_STRING_LENGTH_FUNCTIONAL_OPERATOR:
				sequence_CharSequence_String_length_FunctionalOperator(context, (CharSequence_String_length_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_AND_BIT_OPERATOR:
				sequence_Character_And_BitOperator(context, (Character_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_CALCULATEABLE_PARAMETER:
				sequence_Character_CalculateableParameter(context, (Character_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_FUNCTIONAL_PARAMETER:
				sequence_Character_FunctionalParameter(context, (Character_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_OR_BIT_OPERATOR:
				sequence_Character_Or_BitOperator(context, (Character_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.COPYRIGHT:
				if (rule == grammarAccess.getCopyright_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getCopyrightRule()
						|| rule == grammarAccess.getCopyright_bodyRule()) {
					sequence_Copyright_body_Copyright_empty(context, (Copyright) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCopyright_emptyRule()) {
					sequence_Copyright_empty(context, (Copyright) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.COPYRIGHT_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_copyright_OrGroupRule()) {
					sequence_AttributeFamily_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeLib_copyright_OrGroupRule()) {
					sequence_AttributeLib_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_copyright_OrGroupRule()) {
					sequence_AttributeNameMapping_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeValueRequirement_copyright_OrGroupRule()) {
					sequence_AttributeValueRequirement_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_copyright_OrGroupRule()) {
					sequence_Attribute_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXBasicObject_copyright_OrGroupRule()) {
					sequence_CAEXBasicObject_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXFile_copyright_OrGroupRule()) {
					sequence_CAEXFile_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXObject_copyright_OrGroupRule()) {
					sequence_CAEXObject_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_copyright_OrGroupRule()) {
					sequence_ExternalInterface_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalReferenceType_copyright_OrGroupRule()) {
					sequence_ExternalReferenceType_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstanceHierarchy_copyright_OrGroupRule()) {
					sequence_InstanceHierarchy_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClassLib_copyright_OrGroupRule()) {
					sequence_InterfaceClassLib_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_copyright_OrGroupRule()) {
					sequence_InterfaceClass_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_copyright_OrGroupRule()) {
					sequence_InterfaceFamily_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceIDMapping_copyright_OrGroupRule()) {
					sequence_InterfaceIDMapping_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_copyright_OrGroupRule()) {
					sequence_InternalElement_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_copyright_OrGroupRule()) {
					sequence_InternalLink_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMapping_copyright_OrGroupRule()) {
					sequence_Mapping_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRefSemantic_copyright_OrGroupRule()) {
					sequence_RefSemantic_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRevision_copyright_OrGroupRule()) {
					sequence_Revision_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClassLib_copyright_OrGroupRule()) {
					sequence_RoleClassLib_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_copyright_OrGroupRule()) {
					sequence_RoleClass_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_copyright_OrGroupRule()) {
					sequence_RoleFamily_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_copyright_OrGroupRule()) {
					sequence_RoleRequirements_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_copyright_OrGroupRule()) {
					sequence_SupportedRoleClass_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClassLib_copyright_OrGroupRule()) {
					sequence_SystemUnitClassLib_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_copyright_OrGroupRule()) {
					sequence_SystemUnitClass_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_copyright_OrGroupRule()) {
					sequence_SystemUnitFamily_copyright_OrGroup(context, (Copyright_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.COPYRIGHT_CHANGE_MODE_ATTR_ECLASS:
				sequence_Copyright_changeMode_AttrEClass(context, (Copyright_changeMode_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.COPYRIGHT_VALUE_ATTR_ECLASS:
				sequence_Copyright_value_AttrEClass(context, (Copyright_value_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.COUNT_AGGREGATION_OPERATOR:
				sequence_Count_AggregationOperator(context, (Count_AggregationOperator) semanticObject); 
				return; 
			case QmmPackage.COUNTABLE_REFERENCE_PARAMETER:
				sequence_CountableReferenceParameter(context, (CountableReferenceParameter) semanticObject); 
				return; 
			case QmmPackage.COUNTABLE_REFERENCE_ARGUMENT:
				sequence_Countable_ReferenceArgument(context, (Countable_ReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.DATE_TIME_CALCULATEABLE_ELEMENT_REFERENCE_ARGUMENT:
				sequence_DateTime_CalculateableElementReferenceArgument(context, (DateTime_CalculateableElementReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.DATE_TIME_CALCULATEABLE_PARAMETER:
				sequence_DateTime_CalculateableParameter(context, (DateTime_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.DATE_TIME_FUNCTIONAL_PARAMETER:
				sequence_DateTime_FunctionalParameter(context, (DateTime_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.DESCRIPTION:
				if (rule == grammarAccess.getDescription_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getDescriptionRule()
						|| rule == grammarAccess.getDescription_bodyRule()) {
					sequence_Description_body_Description_empty(context, (Description) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDescription_emptyRule()) {
					sequence_Description_empty(context, (Description) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.DESCRIPTION_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_description_OrGroupRule()) {
					sequence_AttributeFamily_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeLib_description_OrGroupRule()) {
					sequence_AttributeLib_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_description_OrGroupRule()) {
					sequence_AttributeNameMapping_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeValueRequirement_description_OrGroupRule()) {
					sequence_AttributeValueRequirement_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_description_OrGroupRule()) {
					sequence_Attribute_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXBasicObject_description_OrGroupRule()) {
					sequence_CAEXBasicObject_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXFile_description_OrGroupRule()) {
					sequence_CAEXFile_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXObject_description_OrGroupRule()) {
					sequence_CAEXObject_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_description_OrGroupRule()) {
					sequence_ExternalInterface_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalReferenceType_description_OrGroupRule()) {
					sequence_ExternalReferenceType_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstanceHierarchy_description_OrGroupRule()) {
					sequence_InstanceHierarchy_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClassLib_description_OrGroupRule()) {
					sequence_InterfaceClassLib_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_description_OrGroupRule()) {
					sequence_InterfaceClass_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_description_OrGroupRule()) {
					sequence_InterfaceFamily_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceIDMapping_description_OrGroupRule()) {
					sequence_InterfaceIDMapping_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_description_OrGroupRule()) {
					sequence_InternalElement_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_description_OrGroupRule()) {
					sequence_InternalLink_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMapping_description_OrGroupRule()) {
					sequence_Mapping_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRefSemantic_description_OrGroupRule()) {
					sequence_RefSemantic_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRevision_description_OrGroupRule()) {
					sequence_Revision_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClassLib_description_OrGroupRule()) {
					sequence_RoleClassLib_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_description_OrGroupRule()) {
					sequence_RoleClass_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_description_OrGroupRule()) {
					sequence_RoleFamily_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_description_OrGroupRule()) {
					sequence_RoleRequirements_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_description_OrGroupRule()) {
					sequence_SupportedRoleClass_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClassLib_description_OrGroupRule()) {
					sequence_SystemUnitClassLib_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_description_OrGroupRule()) {
					sequence_SystemUnitClass_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_description_OrGroupRule()) {
					sequence_SystemUnitFamily_description_OrGroup(context, (Description_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.DESCRIPTION_CHANGE_MODE_ATTR_ECLASS:
				sequence_Description_changeMode_AttrEClass(context, (Description_changeMode_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.DESCRIPTION_VALUE_ATTR_ECLASS:
				sequence_Description_value_AttrEClass(context, (Description_value_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.DOCUMENT_ROOT:
				if (rule == grammarAccess.getDocumentRoot_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getDocumentRootRule()
						|| rule == grammarAccess.getDocumentRoot_bodyRule()) {
					sequence_DocumentRoot_body_DocumentRoot_empty(context, (DocumentRoot) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDocumentRoot_emptyRule()) {
					sequence_DocumentRoot_empty(context, (DocumentRoot) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.DOCUMENT_ROOT_MIXED_ATTR_ECLASS:
				sequence_DocumentRoot_mixed_AttrEClass(context, (DocumentRoot_mixed_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_AND_BIT_OPERATOR:
				sequence_Double_And_BitOperator(context, (Double_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_CALCULATEABLE_PARAMETER:
				sequence_Double_CalculateableParameter(context, (Double_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_FUNCTIONAL_PARAMETER:
				sequence_Double_FunctionalParameter(context, (Double_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_OR_BIT_OPERATOR:
				sequence_Double_Or_BitOperator(context, (Double_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.EFEATURE_MAP_ENTRY_CALCULATEABLE_ELEMENT_REFERENCE_ARGUMENT:
				sequence_EFeatureMapEntry_CalculateableElementReferenceArgument(context, (EFeatureMapEntry_CalculateableElementReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.EFEATURE_MAP_ENTRY_CALCULATEABLE_PARAMETER:
				sequence_EFeatureMapEntry_CalculateableParameter(context, (EFeatureMapEntry_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.EFEATURE_MAP_ENTRY_FUNCTIONAL_PARAMETER:
				sequence_EFeatureMapEntry_FunctionalParameter(context, (EFeatureMapEntry_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.ELEMENT:
				if (rule == grammarAccess.getElement_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getElementRule()
						|| rule == grammarAccess.getElement_bodyRule()) {
					sequence_Element_body_Element_empty(context, (Element) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getElement_emptyRule()) {
					sequence_Element_empty(context, (Element) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ELEMENT_NAME_ATTR_ECLASS:
				sequence_Element_name_AttrEClass(context, (Element_name_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ELEMENT_VALUE_ATTR_ECLASS:
				sequence_Element_value_AttrEClass(context, (Element_value_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.EXTERNAL_INTERFACE:
				if (rule == grammarAccess.getInterfaceClass_TypeRule()
						|| rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getExternalInterface_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getExternalInterfaceRule()
						|| rule == grammarAccess.getExternalInterface_bodyRule()) {
					sequence_ExternalInterface_body_ExternalInterface_empty(context, (ExternalInterface) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_emptyRule()) {
					sequence_ExternalInterface_empty(context, (ExternalInterface) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.EXTERNAL_INTERFACE_OR_GROUP:
				if (rule == grammarAccess.getInterfaceIDMapping_roleInterface_OrGroupRule()) {
					sequence_InterfaceIDMapping_roleInterface_OrGroup(context, (ExternalInterface_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceIDMapping_systemUnitInterface_OrGroupRule()) {
					sequence_InterfaceIDMapping_systemUnitInterface_OrGroup(context, (ExternalInterface_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_partnerSideA_OrGroupRule()) {
					sequence_InternalLink_partnerSideA_OrGroup(context, (ExternalInterface_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_partnerSideB_OrGroupRule()) {
					sequence_InternalLink_partnerSideB_OrGroup(context, (ExternalInterface_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_externalInterface_OrGroupRule()) {
					sequence_RoleClass_externalInterface_OrGroup(context, (ExternalInterface_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_externalInterface_OrGroupRule()) {
					sequence_RoleFamily_externalInterface_OrGroup(context, (ExternalInterface_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.EXTERNAL_REFERENCE_TYPE:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getExternalReferenceType_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getExternalReferenceTypeRule()
						|| rule == grammarAccess.getExternalReferenceType_bodyRule()) {
					sequence_ExternalReferenceType_body_ExternalReferenceType_empty(context, (ExternalReferenceType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalReferenceType_emptyRule()) {
					sequence_ExternalReferenceType_empty(context, (ExternalReferenceType) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.EXTERNAL_REFERENCE_TYPE_OR_GROUP:
				sequence_CAEXFile_externalReference_OrGroup(context, (ExternalReferenceType_OrGroup) semanticObject); 
				return; 
			case QmmPackage.EXTERNAL_REFERENCE_TYPE_ALIAS_ATTR_ECLASS:
				sequence_ExternalReferenceType_alias_AttrEClass(context, (ExternalReferenceType_alias_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.EXTERNAL_REFERENCE_TYPE_PATH_ATTR_ECLASS:
				sequence_ExternalReferenceType_path_AttrEClass(context, (ExternalReferenceType_path_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.FIND_QUERY:
				sequence_FindQuery(context, (FindQuery) semanticObject); 
				return; 
			case QmmPackage.FLOAT_AND_BIT_OPERATOR:
				sequence_Float_And_BitOperator(context, (Float_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.FLOAT_CALCULATEABLE_PARAMETER:
				sequence_Float_CalculateableParameter(context, (Float_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.FLOAT_FUNCTIONAL_PARAMETER:
				sequence_Float_FunctionalParameter(context, (Float_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.FLOAT_OR_BIT_OPERATOR:
				sequence_Float_Or_BitOperator(context, (Float_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.GENERIC_ATTRIBUTE:
				if (rule == grammarAccess.getGenericAttribute_TypeRule()
						|| rule == grammarAccess.getElement_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getGenericAttributeRule()
						|| rule == grammarAccess.getGenericAttribute_bodyRule()) {
					sequence_GenericAttribute_body_GenericAttribute_empty(context, (GenericAttribute) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericAttribute_emptyRule()) {
					sequence_GenericAttribute_empty(context, (GenericAttribute) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.GENERIC_ATTRIBUTE_OR_GROUP:
				if (rule == grammarAccess.getAdditionalInformation_attributes_OrGroupRule()) {
					sequence_AdditionalInformation_attributes_OrGroup(context, (GenericAttribute_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericElement_attributes_OrGroupRule()) {
					sequence_GenericElement_attributes_OrGroup(context, (GenericAttribute_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.GENERIC_ELEMENT:
				if (rule == grammarAccess.getElement_TypeRule()
						|| rule == grammarAccess.getGenericElement_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getGenericElementRule()
						|| rule == grammarAccess.getGenericElement_bodyRule()) {
					sequence_GenericElement_body_GenericElement_empty(context, (GenericElement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericElement_emptyRule()) {
					sequence_GenericElement_empty(context, (GenericElement) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.GENERIC_ELEMENT_OR_GROUP:
				if (rule == grammarAccess.getAdditionalInformation_nestedElements_OrGroupRule()) {
					sequence_AdditionalInformation_nestedElements_OrGroup(context, (GenericElement_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericElement_nestedElements_OrGroupRule()) {
					sequence_GenericElement_nestedElements_OrGroup(context, (GenericElement_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.GENERIC_ELEMENT_ATTRIBUTE_FEATURE_MAP_ATTR_ECLASS:
				sequence_GenericElement_attributeFeatureMap_AttrEClass(context, (GenericElement_attributeFeatureMap_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.GENERIC_ELEMENT_ELEMENT_FEATURE_MAP_ATTR_ECLASS:
				sequence_GenericElement_elementFeatureMap_AttrEClass(context, (GenericElement_elementFeatureMap_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.INSTANCE_HIERARCHY:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getInstanceHierarchy_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getInstanceHierarchyRule()
						|| rule == grammarAccess.getInstanceHierarchy_bodyRule()) {
					sequence_InstanceHierarchy_body_InstanceHierarchy_empty(context, (InstanceHierarchy) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstanceHierarchy_emptyRule()) {
					sequence_InstanceHierarchy_empty(context, (InstanceHierarchy) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INSTANCE_HIERARCHY_OR_GROUP:
				sequence_CAEXFile_instanceHierarchy_OrGroup(context, (InstanceHierarchy_OrGroup) semanticObject); 
				return; 
			case QmmPackage.INTEGER_PARSE_INT_CLASS_OPERATOR:
				sequence_IntegerParseInt_ClassOperator(context, (IntegerParseInt_ClassOperator) semanticObject); 
				return; 
			case QmmPackage.INTEGER_AND_BIT_OPERATOR:
				sequence_Integer_And_BitOperator(context, (Integer_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.INTEGER_CALCULATEABLE_PARAMETER:
				sequence_Integer_CalculateableParameter(context, (Integer_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.INTEGER_FUNCTIONAL_PARAMETER:
				sequence_Integer_FunctionalParameter(context, (Integer_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.INTEGER_OR_BIT_OPERATOR:
				sequence_Integer_Or_BitOperator(context, (Integer_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.INTEGER_PRIMITIVE_ARGUMENT:
				sequence_Integer_PrimitiveArgument(context, (Integer_PrimitiveArgument) semanticObject); 
				return; 
			case QmmPackage.INTERFACE_CLASS:
				if (rule == grammarAccess.getInterfaceClass_TypeRule()
						|| rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getInterfaceClassRule()
						|| rule == grammarAccess.getInterfaceClass_bodyRule()) {
					sequence_InterfaceClass_body_InterfaceClass_empty(context, (InterfaceClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_emptyRule()) {
					sequence_InterfaceClass_empty(context, (InterfaceClass) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERFACE_CLASS_LIB:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getInterfaceClassLib_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getInterfaceClassLibRule()
						|| rule == grammarAccess.getInterfaceClassLib_bodyRule()) {
					sequence_InterfaceClassLib_body_InterfaceClassLib_empty(context, (InterfaceClassLib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClassLib_emptyRule()) {
					sequence_InterfaceClassLib_empty(context, (InterfaceClassLib) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERFACE_CLASS_LIB_OR_GROUP:
				sequence_CAEXFile_interfaceClassLib_OrGroup(context, (InterfaceClassLib_OrGroup) semanticObject); 
				return; 
			case QmmPackage.INTERFACE_CLASS_OR_GROUP:
				if (rule == grammarAccess.getExternalInterface_baseClass_OrGroupRule()) {
					sequence_ExternalInterface_baseClass_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_externalInterface_OrGroupRule()) {
					sequence_ExternalInterface_externalInterface_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_interfaceClass_OrGroupRule()) {
					sequence_ExternalInterface_interfaceClass_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClassLib_interfaceClass_OrGroupRule()) {
					sequence_InterfaceClassLib_interfaceClass_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_baseClass_OrGroupRule()) {
					sequence_InterfaceClass_baseClass_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_interfaceClass_OrGroupRule()) {
					sequence_InterfaceClass_interfaceClass_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_baseClass_OrGroupRule()) {
					sequence_InterfaceFamily_baseClass_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_interfaceClass_OrGroupRule()) {
					sequence_InterfaceFamily_interfaceClass_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_externalInterface_OrGroupRule()) {
					sequence_InternalElement_externalInterface_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_externalInterface_OrGroupRule()) {
					sequence_RoleRequirements_externalInterface_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_externalInterface_OrGroupRule()) {
					sequence_SystemUnitClass_externalInterface_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_externalInterface_OrGroupRule()) {
					sequence_SystemUnitFamily_externalInterface_OrGroup(context, (InterfaceClass_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERFACE_CLASS_REF_BASE_CLASS_PATH_ATTR_ECLASS:
				sequence_InterfaceClass_refBaseClassPath_AttrEClass(context, (InterfaceClass_refBaseClassPath_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.INTERFACE_FAMILY:
				if (rule == grammarAccess.getInterfaceClass_TypeRule()
						|| rule == grammarAccess.getInterfaceFamily_TypeRule()
						|| rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getInterfaceFamilyRule()
						|| rule == grammarAccess.getInterfaceFamily_bodyRule()) {
					sequence_InterfaceFamily_body_InterfaceFamily_empty(context, (InterfaceFamily) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_emptyRule()) {
					sequence_InterfaceFamily_empty(context, (InterfaceFamily) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERFACE_ID_MAPPING:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getInterfaceIDMapping_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getInterfaceIDMappingRule()
						|| rule == grammarAccess.getInterfaceIDMapping_bodyRule()) {
					sequence_InterfaceIDMapping_body_InterfaceIDMapping_empty(context, (InterfaceIDMapping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceIDMapping_emptyRule()) {
					sequence_InterfaceIDMapping_empty(context, (InterfaceIDMapping) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERFACE_ID_MAPPING_OR_GROUP:
				sequence_Mapping_interfaceIDMapping_OrGroup(context, (InterfaceIDMapping_OrGroup) semanticObject); 
				return; 
			case QmmPackage.INTERFACE_ID_MAPPING_ROLE_INTERFACE_ID_ATTR_ECLASS:
				sequence_InterfaceIDMapping_roleInterfaceID_AttrEClass(context, (InterfaceIDMapping_roleInterfaceID_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.INTERFACE_ID_MAPPING_SYSTEM_UNIT_INTERFACE_ID_ATTR_ECLASS:
				sequence_InterfaceIDMapping_systemUnitInterfaceID_AttrEClass(context, (InterfaceIDMapping_systemUnitInterfaceID_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.INTERNAL_ELEMENT:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getInternalElement_TypeRule()
						|| rule == grammarAccess.getSystemUnitClass_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getInternalElementRule()
						|| rule == grammarAccess.getInternalElement_bodyRule()) {
					sequence_InternalElement_body_InternalElement_empty(context, (InternalElement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_emptyRule()) {
					sequence_InternalElement_empty(context, (InternalElement) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERNAL_ELEMENT_OR_GROUP:
				if (rule == grammarAccess.getInstanceHierarchy_internalElement_OrGroupRule()) {
					sequence_InstanceHierarchy_internalElement_OrGroup(context, (InternalElement_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_internalElement_OrGroupRule()) {
					sequence_InternalElement_internalElement_OrGroup(context, (InternalElement_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_internalElement_OrGroupRule()) {
					sequence_SystemUnitClass_internalElement_OrGroup(context, (InternalElement_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_internalElement_OrGroupRule()) {
					sequence_SystemUnitFamily_internalElement_OrGroup(context, (InternalElement_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERNAL_ELEMENT_REF_BASE_SYSTEM_UNIT_PATH_ATTR_ECLASS:
				sequence_InternalElement_refBaseSystemUnitPath_AttrEClass(context, (InternalElement_refBaseSystemUnitPath_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.INTERNAL_LINK:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getInternalLink_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getInternalLinkRule()
						|| rule == grammarAccess.getInternalLink_bodyRule()) {
					sequence_InternalLink_body_InternalLink_empty(context, (InternalLink) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_emptyRule()) {
					sequence_InternalLink_empty(context, (InternalLink) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERNAL_LINK_OR_GROUP:
				if (rule == grammarAccess.getInternalElement_internalLink_OrGroupRule()) {
					sequence_InternalElement_internalLink_OrGroup(context, (InternalLink_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_internalLink_OrGroupRule()) {
					sequence_SystemUnitClass_internalLink_OrGroup(context, (InternalLink_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_internalLink_OrGroupRule()) {
					sequence_SystemUnitFamily_internalLink_OrGroup(context, (InternalLink_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.INTERNAL_LINK_REF_PARTNER_SIDE_AATTR_ECLASS:
				sequence_InternalLink_refPartnerSideA_AttrEClass(context, (InternalLink_refPartnerSideA_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.INTERNAL_LINK_REF_PARTNER_SIDE_BATTR_ECLASS:
				sequence_InternalLink_refPartnerSideB_AttrEClass(context, (InternalLink_refPartnerSideB_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.LONG_AND_BIT_OPERATOR:
				sequence_Long_And_BitOperator(context, (Long_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.LONG_CALCULATEABLE_PARAMETER:
				sequence_Long_CalculateableParameter(context, (Long_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.LONG_FUNCTIONAL_PARAMETER:
				sequence_Long_FunctionalParameter(context, (Long_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.LONG_OR_BIT_OPERATOR:
				sequence_Long_Or_BitOperator(context, (Long_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.MAPPING:
				if (rule == grammarAccess.getMapping_TypeRule()
						|| rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getMappingRule()
						|| rule == grammarAccess.getMapping_bodyRule()) {
					sequence_Mapping_body_Mapping_empty(context, (Mapping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMapping_emptyRule()) {
					sequence_Mapping_empty(context, (Mapping) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.MAPPING_OR_GROUP:
				if (rule == grammarAccess.getRoleRequirements_mappingObject_OrGroupRule()) {
					sequence_RoleRequirements_mappingObject_OrGroup(context, (Mapping_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_mappingObject_OrGroupRule()) {
					sequence_SupportedRoleClass_mappingObject_OrGroup(context, (Mapping_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.MAX_AGGREGATION_OPERATOR:
				sequence_Max_AggregationOperator(context, (Max_AggregationOperator) semanticObject); 
				return; 
			case QmmPackage.MIN_AGGREGATION_OPERATOR:
				sequence_Min_AggregationOperator(context, (Min_AggregationOperator) semanticObject); 
				return; 
			case QmmPackage.NOMINAL_SCALED_TYPE:
				if (rule == grammarAccess.getNominalScaledType_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getNominalScaledTypeRule()
						|| rule == grammarAccess.getNominalScaledType_bodyRule()) {
					sequence_NominalScaledType_body_NominalScaledType_empty(context, (NominalScaledType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNominalScaledType_emptyRule()) {
					sequence_NominalScaledType_empty(context, (NominalScaledType) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.NOMINAL_SCALED_TYPE_OR_GROUP:
				sequence_AttributeValueRequirement_nominalScaledType_OrGroup(context, (NominalScaledType_OrGroup) semanticObject); 
				return; 
			case QmmPackage.NOMINAL_SCALED_TYPE_REQUIRED_VALUE_ATTR_ECLASS:
				sequence_NominalScaledType_requiredValue_AttrEClass(context, (NominalScaledType_requiredValue_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.NUMBER_AND_BIT_OPERATOR:
				sequence_Number_And_BitOperator(context, (Number_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_CALCULATEABLE_PARAMETER:
				sequence_Number_CalculateableParameter(context, (Number_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_Object_Number_equals_FunctionalOperator(context, (Number_Double_Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_Object_Number_toString_FunctionalOperator(context, (Number_Double_Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_greaterEquals_FunctionalOperator(context, (Number_Double_greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_greaterThan_FunctionalOperator(context, (Number_Double_greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_smallerEquals_FunctionalOperator(context, (Number_Double_smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_smallerThan_FunctionalOperator(context, (Number_Double_smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FLOAT_OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Float_Object_Number_equals_FunctionalOperator(context, (Number_Float_Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FLOAT_OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Number_Float_Object_Number_toString_FunctionalOperator(context, (Number_Float_Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FLOAT_GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Float_greaterEquals_FunctionalOperator(context, (Number_Float_greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FLOAT_GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Float_greaterThan_FunctionalOperator(context, (Number_Float_greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FLOAT_SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Float_smallerEquals_FunctionalOperator(context, (Number_Float_smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FLOAT_SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Float_smallerThan_FunctionalOperator(context, (Number_Float_smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FUNCTIONAL_PARAMETER:
				sequence_Number_FunctionalParameter(context, (Number_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_Object_Number_equals_FunctionalOperator(context, (Number_Integer_Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_Object_Number_toString_FunctionalOperator(context, (Number_Integer_Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_greaterEquals_FunctionalOperator(context, (Number_Integer_greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_greaterThan_FunctionalOperator(context, (Number_Integer_greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_smallerEquals_FunctionalOperator(context, (Number_Integer_smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_smallerThan_FunctionalOperator(context, (Number_Integer_smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_LONG_OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Long_Object_Number_equals_FunctionalOperator(context, (Number_Long_Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_LONG_OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Number_Long_Object_Number_toString_FunctionalOperator(context, (Number_Long_Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_LONG_GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Long_greaterEquals_FunctionalOperator(context, (Number_Long_greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_LONG_GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Long_greaterThan_FunctionalOperator(context, (Number_Long_greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_LONG_SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Long_smallerEquals_FunctionalOperator(context, (Number_Long_smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_LONG_SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Long_smallerThan_FunctionalOperator(context, (Number_Long_smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_OR_BIT_OPERATOR:
				sequence_Number_Or_BitOperator(context, (Number_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_AND_BIT_OPERATOR:
				sequence_Object_And_BitOperator(context, (Object_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_BOOLEAN_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_Boolean_equals_FunctionalOperator(context, (Object_Boolean_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_BOOLEAN_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_Boolean_toString_FunctionalOperator(context, (Object_Boolean_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CALCULATEABLE_PARAMETER:
				sequence_Object_CalculateableParameter(context, (Object_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHAR_SEQUENCE_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_CharSequence_equals_FunctionalOperator(context, (Object_CharSequence_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHAR_SEQUENCE_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_CharSequence_toString_FunctionalOperator(context, (Object_CharSequence_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHARACTER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_Character_equals_FunctionalOperator(context, (Object_Character_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHARACTER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_Character_toString_FunctionalOperator(context, (Object_Character_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_FUNCTIONAL_PARAMETER:
				sequence_Object_FunctionalParameter(context, (Object_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_Number_equals_FunctionalOperator(context, (Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_Number_toString_FunctionalOperator(context, (Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_OR_BIT_OPERATOR:
				sequence_Object_Or_BitOperator(context, (Object_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.OR_EVALUATION_BIT_OPERATOR:
				sequence_Or_EvaluationBitOperator(context, (Or_EvaluationBitOperator) semanticObject); 
				return; 
			case QmmPackage.ORDINAL_SCALED_TYPE:
				if (rule == grammarAccess.getOrdinalScaledType_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getOrdinalScaledTypeRule()
						|| rule == grammarAccess.getOrdinalScaledType_bodyRule()) {
					sequence_OrdinalScaledType_body_OrdinalScaledType_empty(context, (OrdinalScaledType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOrdinalScaledType_emptyRule()) {
					sequence_OrdinalScaledType_empty(context, (OrdinalScaledType) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ORDINAL_SCALED_TYPE_OR_GROUP:
				sequence_AttributeValueRequirement_ordinalScaledType_OrGroup(context, (OrdinalScaledType_OrGroup) semanticObject); 
				return; 
			case QmmPackage.ORDINAL_SCALED_TYPE_REQUIRED_MAX_VALUE_ATTR_ECLASS:
				sequence_OrdinalScaledType_requiredMaxValue_AttrEClass(context, (OrdinalScaledType_requiredMaxValue_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ORDINAL_SCALED_TYPE_REQUIRED_MIN_VALUE_ATTR_ECLASS:
				sequence_OrdinalScaledType_requiredMinValue_AttrEClass(context, (OrdinalScaledType_requiredMinValue_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ORDINAL_SCALED_TYPE_REQUIRED_VALUE_ATTR_ECLASS:
				sequence_OrdinalScaledType_requiredValue_AttrEClass(context, (OrdinalScaledType_requiredValue_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.REF_SEMANTIC:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getRefSemantic_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getRefSemanticRule()
						|| rule == grammarAccess.getRefSemantic_bodyRule()) {
					sequence_RefSemantic_body_RefSemantic_empty(context, (RefSemantic) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRefSemantic_emptyRule()) {
					sequence_RefSemantic_empty(context, (RefSemantic) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.REF_SEMANTIC_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_refSemantic_OrGroupRule()) {
					sequence_AttributeFamily_refSemantic_OrGroup(context, (RefSemantic_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_refSemantic_OrGroupRule()) {
					sequence_Attribute_refSemantic_OrGroup(context, (RefSemantic_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.REF_SEMANTIC_CORRESPONDING_ATTRIBUTE_PATH_ATTR_ECLASS:
				sequence_RefSemantic_correspondingAttributePath_AttrEClass(context, (RefSemantic_correspondingAttributePath_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.REVISION:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getRevision_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getRevisionRule()
						|| rule == grammarAccess.getRevision_bodyRule()) {
					sequence_Revision_body_Revision_empty(context, (Revision) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRevision_emptyRule()) {
					sequence_Revision_empty(context, (Revision) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.REVISION_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_revision_OrGroupRule()) {
					sequence_AttributeFamily_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeLib_revision_OrGroupRule()) {
					sequence_AttributeLib_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_revision_OrGroupRule()) {
					sequence_AttributeNameMapping_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeValueRequirement_revision_OrGroupRule()) {
					sequence_AttributeValueRequirement_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_revision_OrGroupRule()) {
					sequence_Attribute_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXBasicObject_revision_OrGroupRule()) {
					sequence_CAEXBasicObject_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXFile_revision_OrGroupRule()) {
					sequence_CAEXFile_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXObject_revision_OrGroupRule()) {
					sequence_CAEXObject_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_revision_OrGroupRule()) {
					sequence_ExternalInterface_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalReferenceType_revision_OrGroupRule()) {
					sequence_ExternalReferenceType_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstanceHierarchy_revision_OrGroupRule()) {
					sequence_InstanceHierarchy_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClassLib_revision_OrGroupRule()) {
					sequence_InterfaceClassLib_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_revision_OrGroupRule()) {
					sequence_InterfaceClass_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_revision_OrGroupRule()) {
					sequence_InterfaceFamily_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceIDMapping_revision_OrGroupRule()) {
					sequence_InterfaceIDMapping_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_revision_OrGroupRule()) {
					sequence_InternalElement_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_revision_OrGroupRule()) {
					sequence_InternalLink_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMapping_revision_OrGroupRule()) {
					sequence_Mapping_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRefSemantic_revision_OrGroupRule()) {
					sequence_RefSemantic_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRevision_revision_OrGroupRule()) {
					sequence_Revision_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClassLib_revision_OrGroupRule()) {
					sequence_RoleClassLib_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_revision_OrGroupRule()) {
					sequence_RoleClass_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_revision_OrGroupRule()) {
					sequence_RoleFamily_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_revision_OrGroupRule()) {
					sequence_RoleRequirements_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_revision_OrGroupRule()) {
					sequence_SupportedRoleClass_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClassLib_revision_OrGroupRule()) {
					sequence_SystemUnitClassLib_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_revision_OrGroupRule()) {
					sequence_SystemUnitClass_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_revision_OrGroupRule()) {
					sequence_SystemUnitFamily_revision_OrGroup(context, (Revision_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.REVISION_AUTHOR_NAME_ATTR_ECLASS:
				sequence_Revision_authorName_AttrEClass(context, (Revision_authorName_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.REVISION_COMMENT_ATTR_ECLASS:
				sequence_Revision_comment_AttrEClass(context, (Revision_comment_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.REVISION_NEW_VERSION_ATTR_ECLASS:
				sequence_Revision_newVersion_AttrEClass(context, (Revision_newVersion_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.REVISION_OLD_VERSION_ATTR_ECLASS:
				sequence_Revision_oldVersion_AttrEClass(context, (Revision_oldVersion_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.REVISION_REVISION_DATE_ATTR_ECLASS:
				sequence_Revision_revisionDate_AttrEClass(context, (Revision_revisionDate_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ROLE_CLASS:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getRoleClass_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getRoleClassRule()
						|| rule == grammarAccess.getRoleClass_bodyRule()) {
					sequence_RoleClass_body_RoleClass_empty(context, (RoleClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_emptyRule()) {
					sequence_RoleClass_empty(context, (RoleClass) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ROLE_CLASS_LIB:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getRoleClassLib_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getRoleClassLibRule()
						|| rule == grammarAccess.getRoleClassLib_bodyRule()) {
					sequence_RoleClassLib_body_RoleClassLib_empty(context, (RoleClassLib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClassLib_emptyRule()) {
					sequence_RoleClassLib_empty(context, (RoleClassLib) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ROLE_CLASS_LIB_OR_GROUP:
				sequence_CAEXFile_roleClassLib_OrGroup(context, (RoleClassLib_OrGroup) semanticObject); 
				return; 
			case QmmPackage.ROLE_CLASS_OR_GROUP:
				if (rule == grammarAccess.getRoleClassLib_roleClass_OrGroupRule()) {
					sequence_RoleClassLib_roleClass_OrGroup(context, (RoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_baseClass_OrGroupRule()) {
					sequence_RoleClass_baseClass_OrGroup(context, (RoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_roleClass_OrGroupRule()) {
					sequence_RoleClass_roleClass_OrGroup(context, (RoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_baseClass_OrGroupRule()) {
					sequence_RoleFamily_baseClass_OrGroup(context, (RoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_roleClass_OrGroupRule()) {
					sequence_RoleFamily_roleClass_OrGroup(context, (RoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_roleClass_OrGroupRule()) {
					sequence_RoleRequirements_roleClass_OrGroup(context, (RoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_roleClass_OrGroupRule()) {
					sequence_SupportedRoleClass_roleClass_OrGroup(context, (RoleClass_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ROLE_CLASS_REF_BASE_CLASS_PATH_ATTR_ECLASS:
				sequence_RoleClass_refBaseClassPath_AttrEClass(context, (RoleClass_refBaseClassPath_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.ROLE_FAMILY:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getRoleClass_TypeRule()
						|| rule == grammarAccess.getRoleFamily_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getRoleFamilyRule()
						|| rule == grammarAccess.getRoleFamily_bodyRule()) {
					sequence_RoleFamily_body_RoleFamily_empty(context, (RoleFamily) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_emptyRule()) {
					sequence_RoleFamily_empty(context, (RoleFamily) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ROLE_REQUIREMENTS:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getRoleRequirements_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getRoleRequirementsRule()
						|| rule == grammarAccess.getRoleRequirements_bodyRule()) {
					sequence_RoleRequirements_body_RoleRequirements_empty(context, (RoleRequirements) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_emptyRule()) {
					sequence_RoleRequirements_empty(context, (RoleRequirements) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.ROLE_REQUIREMENTS_OR_GROUP:
				sequence_InternalElement_roleRequirements_OrGroup(context, (RoleRequirements_OrGroup) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION:
				if (rule == grammarAccess.getSourceDocumentInformation_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getSourceDocumentInformationRule()
						|| rule == grammarAccess.getSourceDocumentInformation_bodyRule()) {
					sequence_SourceDocumentInformation_body_SourceDocumentInformation_empty(context, (SourceDocumentInformation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSourceDocumentInformation_emptyRule()) {
					sequence_SourceDocumentInformation_empty(context, (SourceDocumentInformation) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_OR_GROUP:
				sequence_CAEXFile_sourceDocumentInformation_OrGroup(context, (SourceDocumentInformation_OrGroup) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_LAST_WRITING_DATE_TIME_ATTR_ECLASS:
				sequence_SourceDocumentInformation_lastWritingDateTime_AttrEClass(context, (SourceDocumentInformation_lastWritingDateTime_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_ID_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originID_AttrEClass(context, (SourceDocumentInformation_originID_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_NAME_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originName_AttrEClass(context, (SourceDocumentInformation_originName_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_PROJECT_ID_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originProjectID_AttrEClass(context, (SourceDocumentInformation_originProjectID_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_PROJECT_TITLE_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originProjectTitle_AttrEClass(context, (SourceDocumentInformation_originProjectTitle_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_RELEASE_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originRelease_AttrEClass(context, (SourceDocumentInformation_originRelease_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_VENDOR_URL_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originVendorURL_AttrEClass(context, (SourceDocumentInformation_originVendorURL_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_VENDOR_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originVendor_AttrEClass(context, (SourceDocumentInformation_originVendor_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SOURCE_DOCUMENT_INFORMATION_ORIGIN_VERSION_ATTR_ECLASS:
				sequence_SourceDocumentInformation_originVersion_AttrEClass(context, (SourceDocumentInformation_originVersion_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.STRING_AND_BIT_OPERATOR:
				sequence_String_And_BitOperator(context, (String_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.STRING_CALCULATEABLE_ELEMENT_REFERENCE_ARGUMENT:
				sequence_String_CalculateableElementReferenceArgument(context, (String_CalculateableElementReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.STRING_CALCULATEABLE_PARAMETER:
				sequence_String_CalculateableParameter(context, (String_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.STRING_FUNCTIONAL_PARAMETER:
				sequence_String_FunctionalParameter(context, (String_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.STRING_OR_BIT_OPERATOR:
				sequence_String_Or_BitOperator(context, (String_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.STRING_PRIMITIVE_ARGUMENT:
				sequence_String_PrimitiveArgument(context, (String_PrimitiveArgument) semanticObject); 
				return; 
			case QmmPackage.SUM_AGGREGATION_OPERATOR:
				sequence_Sum_AggregationOperator(context, (Sum_AggregationOperator) semanticObject); 
				return; 
			case QmmPackage.SUPPORTED_ROLE_CLASS:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getSupportedRoleClass_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getSupportedRoleClassRule()
						|| rule == grammarAccess.getSupportedRoleClass_bodyRule()) {
					sequence_SupportedRoleClass_body_SupportedRoleClass_empty(context, (SupportedRoleClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_emptyRule()) {
					sequence_SupportedRoleClass_empty(context, (SupportedRoleClass) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.SUPPORTED_ROLE_CLASS_OR_GROUP:
				if (rule == grammarAccess.getInternalElement_supportedRoleClass_OrGroupRule()) {
					sequence_InternalElement_supportedRoleClass_OrGroup(context, (SupportedRoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_supportedRoleClass_OrGroupRule()) {
					sequence_SystemUnitClass_supportedRoleClass_OrGroup(context, (SupportedRoleClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_supportedRoleClass_OrGroupRule()) {
					sequence_SystemUnitFamily_supportedRoleClass_OrGroup(context, (SupportedRoleClass_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.SUPPORTED_ROLE_CLASS_REF_ROLE_CLASS_PATH_ATTR_ECLASS:
				sequence_SupportedRoleClass_refRoleClassPath_AttrEClass(context, (SupportedRoleClass_refRoleClassPath_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SYSTEM_UNIT_CLASS:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getSystemUnitClass_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getSystemUnitClassRule()
						|| rule == grammarAccess.getSystemUnitClass_bodyRule()) {
					sequence_SystemUnitClass_body_SystemUnitClass_empty(context, (SystemUnitClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_emptyRule()) {
					sequence_SystemUnitClass_empty(context, (SystemUnitClass) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.SYSTEM_UNIT_CLASS_LIB:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getSystemUnitClassLib_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getSystemUnitClassLibRule()
						|| rule == grammarAccess.getSystemUnitClassLib_bodyRule()) {
					sequence_SystemUnitClassLib_body_SystemUnitClassLib_empty(context, (SystemUnitClassLib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClassLib_emptyRule()) {
					sequence_SystemUnitClassLib_empty(context, (SystemUnitClassLib) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.SYSTEM_UNIT_CLASS_LIB_OR_GROUP:
				sequence_CAEXFile_systemUnitClassLib_OrGroup(context, (SystemUnitClassLib_OrGroup) semanticObject); 
				return; 
			case QmmPackage.SYSTEM_UNIT_CLASS_OR_GROUP:
				if (rule == grammarAccess.getInternalElement_baseClass_OrGroupRule()) {
					sequence_InternalElement_baseClass_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_baseSystemUnit_OrGroupRule()) {
					sequence_InternalElement_baseSystemUnit_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_systemUnitClass_OrGroupRule()) {
					sequence_InternalElement_systemUnitClass_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClassLib_systemUnitClass_OrGroupRule()) {
					sequence_SystemUnitClassLib_systemUnitClass_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_baseClass_OrGroupRule()) {
					sequence_SystemUnitClass_baseClass_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_systemUnitClass_OrGroupRule()) {
					sequence_SystemUnitClass_systemUnitClass_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_baseClass_OrGroupRule()) {
					sequence_SystemUnitFamily_baseClass_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_systemUnitClass_OrGroupRule()) {
					sequence_SystemUnitFamily_systemUnitClass_OrGroup(context, (SystemUnitClass_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.SYSTEM_UNIT_CLASS_REF_BASE_CLASS_PATH_ATTR_ECLASS:
				sequence_SystemUnitClass_refBaseClassPath_AttrEClass(context, (SystemUnitClass_refBaseClassPath_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SYSTEM_UNIT_FAMILY:
				if (rule == grammarAccess.getCAEXBasicObject_TypeRule()
						|| rule == grammarAccess.getCAEXObject_TypeRule()
						|| rule == grammarAccess.getSystemUnitFamily_TypeRule()
						|| rule == grammarAccess.getSystemUnitClass_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getSystemUnitFamilyRule()
						|| rule == grammarAccess.getSystemUnitFamily_bodyRule()) {
					sequence_SystemUnitFamily_body_SystemUnitFamily_empty(context, (SystemUnitFamily) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_emptyRule()) {
					sequence_SystemUnitFamily_empty(context, (SystemUnitFamily) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.UNKNOWN_TYPE:
				if (rule == grammarAccess.getUnknownType_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getUnknownTypeRule()
						|| rule == grammarAccess.getUnknownType_bodyRule()) {
					sequence_UnknownType_body_UnknownType_empty(context, (UnknownType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnknownType_emptyRule()) {
					sequence_UnknownType_empty(context, (UnknownType) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.UNKNOWN_TYPE_OR_GROUP:
				sequence_AttributeValueRequirement_unknownType_OrGroup(context, (UnknownType_OrGroup) semanticObject); 
				return; 
			case QmmPackage.UNKNOWN_TYPE_REQUIREMENTS_ATTR_ECLASS:
				sequence_UnknownType_requirements_AttrEClass(context, (UnknownType_requirements_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.VERSION:
				if (rule == grammarAccess.getVersion_TypeRule()
						|| rule == grammarAccess.getRootClassRule()
						|| rule == grammarAccess.getVersionRule()
						|| rule == grammarAccess.getVersion_bodyRule()) {
					sequence_Version_body_Version_empty(context, (Version) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVersion_emptyRule()) {
					sequence_Version_empty(context, (Version) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.VERSION_OR_GROUP:
				if (rule == grammarAccess.getAttributeFamily_version_OrGroupRule()) {
					sequence_AttributeFamily_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeLib_version_OrGroupRule()) {
					sequence_AttributeLib_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeNameMapping_version_OrGroupRule()) {
					sequence_AttributeNameMapping_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeValueRequirement_version_OrGroupRule()) {
					sequence_AttributeValueRequirement_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttribute_version_OrGroupRule()) {
					sequence_Attribute_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXBasicObject_version_OrGroupRule()) {
					sequence_CAEXBasicObject_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXFile_version_OrGroupRule()) {
					sequence_CAEXFile_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCAEXObject_version_OrGroupRule()) {
					sequence_CAEXObject_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalInterface_version_OrGroupRule()) {
					sequence_ExternalInterface_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExternalReferenceType_version_OrGroupRule()) {
					sequence_ExternalReferenceType_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstanceHierarchy_version_OrGroupRule()) {
					sequence_InstanceHierarchy_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClassLib_version_OrGroupRule()) {
					sequence_InterfaceClassLib_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceClass_version_OrGroupRule()) {
					sequence_InterfaceClass_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceFamily_version_OrGroupRule()) {
					sequence_InterfaceFamily_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInterfaceIDMapping_version_OrGroupRule()) {
					sequence_InterfaceIDMapping_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalElement_version_OrGroupRule()) {
					sequence_InternalElement_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInternalLink_version_OrGroupRule()) {
					sequence_InternalLink_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMapping_version_OrGroupRule()) {
					sequence_Mapping_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRefSemantic_version_OrGroupRule()) {
					sequence_RefSemantic_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRevision_version_OrGroupRule()) {
					sequence_Revision_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClassLib_version_OrGroupRule()) {
					sequence_RoleClassLib_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleClass_version_OrGroupRule()) {
					sequence_RoleClass_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleFamily_version_OrGroupRule()) {
					sequence_RoleFamily_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRoleRequirements_version_OrGroupRule()) {
					sequence_RoleRequirements_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSupportedRoleClass_version_OrGroupRule()) {
					sequence_SupportedRoleClass_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClassLib_version_OrGroupRule()) {
					sequence_SystemUnitClassLib_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitClass_version_OrGroupRule()) {
					sequence_SystemUnitClass_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemUnitFamily_version_OrGroupRule()) {
					sequence_SystemUnitFamily_version_OrGroup(context, (Version_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.VERSION_CHANGE_MODE_ATTR_ECLASS:
				sequence_Version_changeMode_AttrEClass(context, (Version_changeMode_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.VERSION_VALUE_ATTR_ECLASS:
				sequence_Version_value_AttrEClass(context, (Version_value_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.CHAR_AT_FUNCTIONAL_OPERATOR:
				sequence_charAt_FunctionalOperator(context, (charAt_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.COMPARE_TO_FUNCTIONAL_OPERATOR:
				sequence_compareTo_FunctionalOperator(context, (compareTo_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CONCAT_FUNCTIONAL_OPERATOR:
				sequence_concat_FunctionalOperator(context, (concat_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CONTAINS_FUNCTIONAL_OPERATOR:
				sequence_contains_FunctionalOperator(context, (contains_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.ENDS_WITH_FUNCTIONAL_OPERATOR:
				sequence_endsWith_FunctionalOperator(context, (endsWith_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.EQUALS_IGNORE_CASE_FUNCTIONAL_OPERATOR:
				sequence_equalsIgnoreCase_FunctionalOperator(context, (equalsIgnoreCase_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.EQUALS_FUNCTIONAL_OPERATOR:
				sequence_equals_FunctionalOperator(context, (equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_greaterEquals_FunctionalOperator(context, (greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_greaterThan_FunctionalOperator(context, (greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.INDEX_OF_STRING_FUNCTIONAL_OPERATOR:
				sequence_indexOfString_FunctionalOperator(context, (indexOfString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.IS_EMPTY_FUNCTIONAL_OPERATOR:
				sequence_isEmpty_FunctionalOperator(context, (isEmpty_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.LENGTH_FUNCTIONAL_OPERATOR:
				sequence_length_FunctionalOperator(context, (length_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.PARSE_BOOLEAN_FUNCTIONAL_OPERATOR:
				sequence_parseBoolean_FunctionalOperator(context, (parseBoolean_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_smallerEquals_FunctionalOperator(context, (smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_smallerThan_FunctionalOperator(context, (smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.SUBSTRING_FUNCTIONAL_OPERATOR:
				sequence_substring_FunctionalOperator(context, (substring_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_toString_FunctionalOperator(context, (toString_FunctionalOperator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AdditionalInformation_attributes_OrGroup returns GenericAttribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=GenericAttribute_Type containment+=GenericAttribute_Type*)?)
	 */
	protected void sequence_AdditionalInformation_attributes_OrGroup(ISerializationContext context, GenericAttribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AdditionalInformation_Type returns AdditionalInformation
	 *     Element_Type returns AdditionalInformation
	 *     GenericElement_Type returns AdditionalInformation
	 *     RootClass returns AdditionalInformation
	 *     AdditionalInformation returns AdditionalInformation
	 *     AdditionalInformation_body returns AdditionalInformation
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             elementFeatureMap_AttrEClass+=GenericElement_elementFeatureMap_AttrEClass | 
	 *             attributeFeatureMap_AttrEClass+=GenericElement_attributeFeatureMap_AttrEClass | 
	 *             attributes+=GenericElement_attributes_OrGroup | 
	 *             nestedElements+=GenericElement_nestedElements_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 name_AttrEClass=Element_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     elementFeatureMap_AttrEClass+=GenericElement_elementFeatureMap_AttrEClass | 
	 *                     attributeFeatureMap_AttrEClass+=GenericElement_attributeFeatureMap_AttrEClass | 
	 *                     attributes+=GenericElement_attributes_OrGroup | 
	 *                     nestedElements+=GenericElement_nestedElements_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 value_AttrEClass=Element_value_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     elementFeatureMap_AttrEClass+=GenericElement_elementFeatureMap_AttrEClass | 
	 *                     attributeFeatureMap_AttrEClass+=GenericElement_attributeFeatureMap_AttrEClass | 
	 *                     attributes+=GenericElement_attributes_OrGroup | 
	 *                     nestedElements+=GenericElement_nestedElements_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_AdditionalInformation_body_AdditionalInformation_empty(ISerializationContext context, AdditionalInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AdditionalInformation_empty returns AdditionalInformation
	 *
	 * Constraint:
	 *     {AdditionalInformation}
	 */
	protected void sequence_AdditionalInformation_empty(ISerializationContext context, AdditionalInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AdditionalInformation_nestedElements_OrGroup returns GenericElement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=GenericElement_Type containment+=GenericElement_Type*)?)
	 */
	protected void sequence_AdditionalInformation_nestedElements_OrGroup(ISerializationContext context, GenericElement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvaluationOperator returns And_EvaluationBitOperator
	 *     EvaluationBitOperator returns And_EvaluationBitOperator
	 *     And_EvaluationBitOperator returns And_EvaluationBitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=EvaluationOperator connects+=EvaluationOperator+)
	 */
	protected void sequence_And_EvaluationBitOperator(ISerializationContext context, And_EvaluationBitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns AttributeDataType_CalculateableElementReferenceArgument
	 *     Calculateable_Argument returns AttributeDataType_CalculateableElementReferenceArgument
	 *     CalculateableElement_ReferenceArgument returns AttributeDataType_CalculateableElementReferenceArgument
	 *     AttributeDataType_CalculateableElementReferenceArgument returns AttributeDataType_CalculateableElementReferenceArgument
	 *
	 * Constraint:
	 *     reference=[AttributeDataType_CalculateableElement|ID]
	 */
	protected void sequence_AttributeDataType_CalculateableElementReferenceArgument(ISerializationContext context, AttributeDataType_CalculateableElementReferenceArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getAttributeDataType_CalculateableElementReferenceArgument_Reference()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getAttributeDataType_CalculateableElementReferenceArgument_Reference()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeDataType_CalculateableElementReferenceArgumentAccess().getReferenceAttributeDataType_CalculateableElementIDTerminalRuleCall_2_0_1(), semanticObject.eGet(QmmPackage.eINSTANCE.getAttributeDataType_CalculateableElementReferenceArgument_Reference(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeDataType_CalculateableParameter returns AttributeDataType_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_AttributeDataType_CalculateableParameter(ISerializationContext context, AttributeDataType_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeDataType_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeDataType_FunctionalParameter returns AttributeDataType_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_AttributeDataType_FunctionalParameter(ISerializationContext context, AttributeDataType_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeDataType_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_AttributeFamily_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_AttributeFamily_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns AttributeFamily
	 *     CAEXObject_Type returns AttributeFamily
	 *     Attribute_Type returns AttributeFamily
	 *     AttributeFamily_Type returns AttributeFamily
	 *     RootClass returns AttributeFamily
	 *     AttributeFamily returns AttributeFamily
	 *     AttributeFamily_body returns AttributeFamily
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             constraint+=Attribute_constraint_OrGroup | 
	 *             refSemantic+=Attribute_refSemantic_OrGroup | 
	 *             attribute+=Attribute_attribute_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 value_AttrEClass=Attribute_value_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refAttributeType_AttrEClass=Attribute_refAttributeType_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 defaultValue_AttrEClass=Attribute_defaultValue_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 unit_AttrEClass=Attribute_unit_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 attributeDataType_AttrEClass=Attribute_attributeDataType_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_AttributeFamily_body_AttributeFamily_empty(ISerializationContext context, AttributeFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_constraint_OrGroup returns AttributeValueRequirement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AttributeValueRequirement_Type containment+=AttributeValueRequirement_Type*)?)
	 */
	protected void sequence_AttributeFamily_constraint_OrGroup(ISerializationContext context, AttributeValueRequirement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_AttributeFamily_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_AttributeFamily_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_empty returns AttributeFamily
	 *
	 * Constraint:
	 *     {AttributeFamily}
	 */
	protected void sequence_AttributeFamily_empty(ISerializationContext context, AttributeFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_refSemantic_OrGroup returns RefSemantic_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RefSemantic_Type containment+=RefSemantic_Type*)?)
	 */
	protected void sequence_AttributeFamily_refSemantic_OrGroup(ISerializationContext context, RefSemantic_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_AttributeFamily_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeFamily_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_AttributeFamily_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeLib_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_AttributeLib_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeLib_attributeType_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_AttributeLib_attributeType_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns AttributeLib
	 *     CAEXObject_Type returns AttributeLib
	 *     AttributeLib_Type returns AttributeLib
	 *     RootClass returns AttributeLib
	 *     AttributeLib returns AttributeLib
	 *     AttributeLib_body returns AttributeLib
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             attributeType+=AttributeLib_attributeType_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attributeType+=AttributeLib_attributeType_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attributeType+=AttributeLib_attributeType_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attributeType+=AttributeLib_attributeType_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_AttributeLib_body_AttributeLib_empty(ISerializationContext context, AttributeLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeLib_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_AttributeLib_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeLib_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_AttributeLib_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeLib_empty returns AttributeLib
	 *
	 * Constraint:
	 *     {AttributeLib}
	 */
	protected void sequence_AttributeLib_empty(ISerializationContext context, AttributeLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeLib_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_AttributeLib_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeLib_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_AttributeLib_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_AttributeNameMapping_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_Type returns AttributeNameMapping
	 *     CAEXBasicObject_Type returns AttributeNameMapping
	 *     RootClass returns AttributeNameMapping
	 *     AttributeNameMapping returns AttributeNameMapping
	 *     AttributeNameMapping_body returns AttributeNameMapping
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             roleAttribute+=AttributeNameMapping_roleAttribute_OrGroup | 
	 *             systemUnitAttribute+=AttributeNameMapping_systemUnitAttribute_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 systemUnitAttributeName_AttrEClass=AttributeNameMapping_systemUnitAttributeName_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleAttribute+=AttributeNameMapping_roleAttribute_OrGroup | 
	 *                     systemUnitAttribute+=AttributeNameMapping_systemUnitAttribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleAttribute+=AttributeNameMapping_roleAttribute_OrGroup | 
	 *                     systemUnitAttribute+=AttributeNameMapping_systemUnitAttribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 roleAttributeName_AttrEClass=AttributeNameMapping_roleAttributeName_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleAttribute+=AttributeNameMapping_roleAttribute_OrGroup | 
	 *                     systemUnitAttribute+=AttributeNameMapping_systemUnitAttribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_AttributeNameMapping_body_AttributeNameMapping_empty(ISerializationContext context, AttributeNameMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_AttributeNameMapping_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_AttributeNameMapping_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_empty returns AttributeNameMapping
	 *
	 * Constraint:
	 *     {AttributeNameMapping}
	 */
	protected void sequence_AttributeNameMapping_empty(ISerializationContext context, AttributeNameMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_AttributeNameMapping_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_roleAttributeName_AttrEClass returns AttributeNameMapping_roleAttributeName_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_AttributeNameMapping_roleAttributeName_AttrEClass(ISerializationContext context, AttributeNameMapping_roleAttributeName_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_roleAttribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_AttributeNameMapping_roleAttribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_systemUnitAttributeName_AttrEClass returns AttributeNameMapping_systemUnitAttributeName_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_AttributeNameMapping_systemUnitAttributeName_AttrEClass(ISerializationContext context, AttributeNameMapping_systemUnitAttributeName_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_systemUnitAttribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_AttributeNameMapping_systemUnitAttribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_AttributeNameMapping_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns AttributeValueRequirement
	 *     AttributeValueRequirement_Type returns AttributeValueRequirement
	 *     RootClass returns AttributeValueRequirement
	 *     AttributeValueRequirement returns AttributeValueRequirement
	 *     AttributeValueRequirement_body returns AttributeValueRequirement
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             ordinalScaledType+=AttributeValueRequirement_ordinalScaledType_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             nominalScaledType+=AttributeValueRequirement_nominalScaledType_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             unknownType+=AttributeValueRequirement_unknownType_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     ordinalScaledType+=AttributeValueRequirement_ordinalScaledType_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     nominalScaledType+=AttributeValueRequirement_nominalScaledType_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     unknownType+=AttributeValueRequirement_unknownType_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=AttributeValueRequirement_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     ordinalScaledType+=AttributeValueRequirement_ordinalScaledType_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     nominalScaledType+=AttributeValueRequirement_nominalScaledType_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     unknownType+=AttributeValueRequirement_unknownType_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_AttributeValueRequirement_body_AttributeValueRequirement_empty(ISerializationContext context, AttributeValueRequirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_empty returns AttributeValueRequirement
	 *
	 * Constraint:
	 *     {AttributeValueRequirement}
	 */
	protected void sequence_AttributeValueRequirement_empty(ISerializationContext context, AttributeValueRequirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_name_AttrEClass returns AttributeValueRequirement_name_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_AttributeValueRequirement_name_AttrEClass(ISerializationContext context, AttributeValueRequirement_name_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_nominalScaledType_OrGroup returns NominalScaledType_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=NominalScaledType_Type containment+=NominalScaledType_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_nominalScaledType_OrGroup(ISerializationContext context, NominalScaledType_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_ordinalScaledType_OrGroup returns OrdinalScaledType_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=OrdinalScaledType_Type containment+=OrdinalScaledType_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_ordinalScaledType_OrGroup(ISerializationContext context, OrdinalScaledType_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_unknownType_OrGroup returns UnknownType_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=UnknownType_Type containment+=UnknownType_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_unknownType_OrGroup(ISerializationContext context, UnknownType_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_AttributeValueRequirement_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_Attribute_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_attributeDataType_AttrEClass returns Attribute_attributeDataType_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'?)
	 */
	protected void sequence_Attribute_attributeDataType_AttrEClass(ISerializationContext context, Attribute_attributeDataType_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_Attribute_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns Attribute
	 *     CAEXObject_Type returns Attribute
	 *     Attribute_Type returns Attribute
	 *     RootClass returns Attribute
	 *     Attribute returns Attribute
	 *     Attribute_body returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             constraint+=Attribute_constraint_OrGroup | 
	 *             refSemantic+=Attribute_refSemantic_OrGroup | 
	 *             attribute+=Attribute_attribute_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 value_AttrEClass=Attribute_value_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refAttributeType_AttrEClass=Attribute_refAttributeType_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 defaultValue_AttrEClass=Attribute_defaultValue_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 unit_AttrEClass=Attribute_unit_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 attributeDataType_AttrEClass=Attribute_attributeDataType_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     constraint+=Attribute_constraint_OrGroup | 
	 *                     refSemantic+=Attribute_refSemantic_OrGroup | 
	 *                     attribute+=Attribute_attribute_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_Attribute_body_Attribute_empty(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_constraint_OrGroup returns AttributeValueRequirement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AttributeValueRequirement_Type containment+=AttributeValueRequirement_Type*)?)
	 */
	protected void sequence_Attribute_constraint_OrGroup(ISerializationContext context, AttributeValueRequirement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_Attribute_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_defaultValue_AttrEClass returns Attribute_defaultValue_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Attribute_defaultValue_AttrEClass(ISerializationContext context, Attribute_defaultValue_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_Attribute_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_empty returns Attribute
	 *
	 * Constraint:
	 *     {Attribute}
	 */
	protected void sequence_Attribute_empty(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_refAttributeType_AttrEClass returns Attribute_refAttributeType_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Attribute_refAttributeType_AttrEClass(ISerializationContext context, Attribute_refAttributeType_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_refSemantic_OrGroup returns RefSemantic_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RefSemantic_Type containment+=RefSemantic_Type*)?)
	 */
	protected void sequence_Attribute_refSemantic_OrGroup(ISerializationContext context, RefSemantic_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_Attribute_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_unit_AttrEClass returns Attribute_unit_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Attribute_unit_AttrEClass(ISerializationContext context, Attribute_unit_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_value_AttrEClass returns Attribute_value_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Attribute_value_AttrEClass(ISerializationContext context, Attribute_value_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_Attribute_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Boolean_And_BitOperator
	 *     Boolean_BitOperator returns Boolean_And_BitOperator
	 *     Boolean_And_BitOperator returns Boolean_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Boolean_ExpressionOperator connects+=Boolean_ExpressionOperator+)
	 */
	protected void sequence_Boolean_And_BitOperator(ISerializationContext context, Boolean_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_CalculateableParameter returns Boolean_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Boolean_CalculateableParameter(ISerializationContext context, Boolean_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolean_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_FunctionalParameter returns Boolean_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Boolean_FunctionalParameter(ISerializationContext context, Boolean_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolean_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Boolean_Or_BitOperator
	 *     Boolean_BitOperator returns Boolean_Or_BitOperator
	 *     Boolean_Or_BitOperator returns Boolean_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Boolean_ExpressionOperator connects+=Boolean_ExpressionOperator+)
	 */
	protected void sequence_Boolean_Or_BitOperator(ISerializationContext context, Boolean_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_CAEXBasicObject_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns CAEXBasicObject
	 *     RootClass returns CAEXBasicObject
	 *     CAEXBasicObject returns CAEXBasicObject
	 *     CAEXBasicObject_body returns CAEXBasicObject
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *             (
	 *                 EvaluationOperator+=EvaluationOperator | 
	 *                 copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                 description+=CAEXBasicObject_description_OrGroup | 
	 *                 additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                 revision+=CAEXBasicObject_revision_OrGroup | 
	 *                 version+=CAEXBasicObject_version_OrGroup
	 *             )*
	 *         )?
	 *     )
	 */
	protected void sequence_CAEXBasicObject_body_CAEXBasicObject_empty(ISerializationContext context, CAEXBasicObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_changeMode_AttrEClass returns CAEXBasicObject_changeMode_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=ChangeMode_EnumerationOperator?)
	 */
	protected void sequence_CAEXBasicObject_changeMode_AttrEClass(ISerializationContext context, CAEXBasicObject_changeMode_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_CAEXBasicObject_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_CAEXBasicObject_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_empty returns CAEXBasicObject
	 *
	 * Constraint:
	 *     {CAEXBasicObject}
	 */
	protected void sequence_CAEXBasicObject_empty(ISerializationContext context, CAEXBasicObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_CAEXBasicObject_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_CAEXBasicObject_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_CAEXFile_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_attributeTypeLib_OrGroup returns AttributeLib_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AttributeLib_Type containment+=AttributeLib_Type*)?)
	 */
	protected void sequence_CAEXFile_attributeTypeLib_OrGroup(ISerializationContext context, AttributeLib_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns CAEXFile
	 *     CAEXFile_Type returns CAEXFile
	 *     RootClass returns CAEXFile
	 *     CAEXFile returns CAEXFile
	 *     CAEXFile_body returns CAEXFile
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             systemUnitClassLib+=CAEXFile_systemUnitClassLib_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             roleClassLib+=CAEXFile_roleClassLib_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             externalReference+=CAEXFile_externalReference_OrGroup | 
	 *             instanceHierarchy+=CAEXFile_instanceHierarchy_OrGroup | 
	 *             superiorStandardVersion_AttrEClass+=CAEXFile_superiorStandardVersion_AttrEClass | 
	 *             sourceDocumentInformation+=CAEXFile_sourceDocumentInformation_OrGroup | 
	 *             interfaceClassLib+=CAEXFile_interfaceClassLib_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             attributeTypeLib+=CAEXFile_attributeTypeLib_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 schemaVersion_AttrEClass=CAEXFile_schemaVersion_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     systemUnitClassLib+=CAEXFile_systemUnitClassLib_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     roleClassLib+=CAEXFile_roleClassLib_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     externalReference+=CAEXFile_externalReference_OrGroup | 
	 *                     instanceHierarchy+=CAEXFile_instanceHierarchy_OrGroup | 
	 *                     superiorStandardVersion_AttrEClass+=CAEXFile_superiorStandardVersion_AttrEClass | 
	 *                     sourceDocumentInformation+=CAEXFile_sourceDocumentInformation_OrGroup | 
	 *                     interfaceClassLib+=CAEXFile_interfaceClassLib_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attributeTypeLib+=CAEXFile_attributeTypeLib_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     systemUnitClassLib+=CAEXFile_systemUnitClassLib_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     roleClassLib+=CAEXFile_roleClassLib_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     externalReference+=CAEXFile_externalReference_OrGroup | 
	 *                     instanceHierarchy+=CAEXFile_instanceHierarchy_OrGroup | 
	 *                     superiorStandardVersion_AttrEClass+=CAEXFile_superiorStandardVersion_AttrEClass | 
	 *                     sourceDocumentInformation+=CAEXFile_sourceDocumentInformation_OrGroup | 
	 *                     interfaceClassLib+=CAEXFile_interfaceClassLib_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attributeTypeLib+=CAEXFile_attributeTypeLib_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 fileName_AttrEClass=CAEXFile_fileName_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     systemUnitClassLib+=CAEXFile_systemUnitClassLib_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     roleClassLib+=CAEXFile_roleClassLib_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     externalReference+=CAEXFile_externalReference_OrGroup | 
	 *                     instanceHierarchy+=CAEXFile_instanceHierarchy_OrGroup | 
	 *                     superiorStandardVersion_AttrEClass+=CAEXFile_superiorStandardVersion_AttrEClass | 
	 *                     sourceDocumentInformation+=CAEXFile_sourceDocumentInformation_OrGroup | 
	 *                     interfaceClassLib+=CAEXFile_interfaceClassLib_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attributeTypeLib+=CAEXFile_attributeTypeLib_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_CAEXFile_body_CAEXFile_empty(ISerializationContext context, CAEXFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_CAEXFile_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_CAEXFile_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_empty returns CAEXFile
	 *
	 * Constraint:
	 *     {CAEXFile}
	 */
	protected void sequence_CAEXFile_empty(ISerializationContext context, CAEXFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_externalReference_OrGroup returns ExternalReferenceType_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=ExternalReferenceType_Type containment+=ExternalReferenceType_Type*)?)
	 */
	protected void sequence_CAEXFile_externalReference_OrGroup(ISerializationContext context, ExternalReferenceType_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_fileName_AttrEClass returns CAEXFile_fileName_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_CAEXFile_fileName_AttrEClass(ISerializationContext context, CAEXFile_fileName_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_instanceHierarchy_OrGroup returns InstanceHierarchy_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InstanceHierarchy_Type containment+=InstanceHierarchy_Type*)?)
	 */
	protected void sequence_CAEXFile_instanceHierarchy_OrGroup(ISerializationContext context, InstanceHierarchy_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_interfaceClassLib_OrGroup returns InterfaceClassLib_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClassLib_Type containment+=InterfaceClassLib_Type*)?)
	 */
	protected void sequence_CAEXFile_interfaceClassLib_OrGroup(ISerializationContext context, InterfaceClassLib_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_CAEXFile_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_roleClassLib_OrGroup returns RoleClassLib_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClassLib_Type containment+=RoleClassLib_Type*)?)
	 */
	protected void sequence_CAEXFile_roleClassLib_OrGroup(ISerializationContext context, RoleClassLib_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_schemaVersion_AttrEClass returns CAEXFile_schemaVersion_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_CAEXFile_schemaVersion_AttrEClass(ISerializationContext context, CAEXFile_schemaVersion_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_sourceDocumentInformation_OrGroup returns SourceDocumentInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SourceDocumentInformation_Type containment+=SourceDocumentInformation_Type*)?)
	 */
	protected void sequence_CAEXFile_sourceDocumentInformation_OrGroup(ISerializationContext context, SourceDocumentInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_superiorStandardVersion_AttrEClass returns CAEXFile_superiorStandardVersion_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_CAEXFile_superiorStandardVersion_AttrEClass(ISerializationContext context, CAEXFile_superiorStandardVersion_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_systemUnitClassLib_OrGroup returns SystemUnitClassLib_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClassLib_Type containment+=SystemUnitClassLib_Type*)?)
	 */
	protected void sequence_CAEXFile_systemUnitClassLib_OrGroup(ISerializationContext context, SystemUnitClassLib_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_CAEXFile_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_CAEXObject_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns CAEXObject
	 *     CAEXObject_Type returns CAEXObject
	 *     RootClass returns CAEXObject
	 *     CAEXObject returns CAEXObject
	 *     CAEXObject_body returns CAEXObject
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_CAEXObject_body_CAEXObject_empty(ISerializationContext context, CAEXObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_CAEXObject_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_CAEXObject_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_empty returns CAEXObject
	 *
	 * Constraint:
	 *     {CAEXObject}
	 */
	protected void sequence_CAEXObject_empty(ISerializationContext context, CAEXObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_iD_AttrEClass returns CAEXObject_iD_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_CAEXObject_iD_AttrEClass(ISerializationContext context, CAEXObject_iD_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_name_AttrEClass returns CAEXObject_name_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_CAEXObject_name_AttrEClass(ISerializationContext context, CAEXObject_name_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_CAEXObject_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXObject_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_CAEXObject_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeMode_EnumerationOperator returns ChangeMode_EnumerationOperator
	 *
	 * Constraint:
	 *     (argument=ChangeMode or=ChangeMode_EnumerationOperator?)
	 */
	protected void sequence_ChangeMode_EnumerationOperator(ISerializationContext context, ChangeMode_EnumerationOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns CharSequence_And_BitOperator
	 *     CharSequence_BitOperator returns CharSequence_And_BitOperator
	 *     CharSequence_And_BitOperator returns CharSequence_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=CharSequence_ExpressionOperator connects+=CharSequence_ExpressionOperator+)
	 */
	protected void sequence_CharSequence_And_BitOperator(ISerializationContext context, CharSequence_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_CalculateableParameter returns CharSequence_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_CharSequence_CalculateableParameter(ISerializationContext context, CharSequence_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharSequence_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_FunctionalParameter returns CharSequence_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_CharSequence_FunctionalParameter(ISerializationContext context, CharSequence_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharSequence_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns CharSequence_Or_BitOperator
	 *     CharSequence_BitOperator returns CharSequence_Or_BitOperator
	 *     CharSequence_Or_BitOperator returns CharSequence_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=CharSequence_ExpressionOperator connects+=CharSequence_ExpressionOperator+)
	 */
	protected void sequence_CharSequence_Or_BitOperator(ISerializationContext context, CharSequence_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *     String_FunctionalOperator returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *     CharSequence_String_Object_CharSequence_equals_FunctionalOperator returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_CharSequence_String_Object_CharSequence_equals_FunctionalOperator(ISerializationContext context, CharSequence_String_Object_CharSequence_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *     String_FunctionalOperator returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *     CharSequence_String_Object_CharSequence_toString_FunctionalOperator returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_CharSequence_String_Object_CharSequence_toString_FunctionalOperator(ISerializationContext context, CharSequence_String_Object_CharSequence_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns CharSequence_String_length_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns CharSequence_String_length_FunctionalOperator
	 *     String_FunctionalOperator returns CharSequence_String_length_FunctionalOperator
	 *     CharSequence_String_length_FunctionalOperator returns CharSequence_String_length_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_CharSequence_String_length_FunctionalOperator(ISerializationContext context, CharSequence_String_length_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Character_And_BitOperator
	 *     Character_BitOperator returns Character_And_BitOperator
	 *     Character_And_BitOperator returns Character_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Character_ExpressionOperator connects+=Character_ExpressionOperator+)
	 */
	protected void sequence_Character_And_BitOperator(ISerializationContext context, Character_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_CalculateableParameter returns Character_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Character_CalculateableParameter(ISerializationContext context, Character_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharacter_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Character_FunctionalParameter returns Character_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Character_FunctionalParameter(ISerializationContext context, Character_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharacter_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Character_Or_BitOperator
	 *     Character_BitOperator returns Character_Or_BitOperator
	 *     Character_Or_BitOperator returns Character_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Character_ExpressionOperator connects+=Character_ExpressionOperator+)
	 */
	protected void sequence_Character_Or_BitOperator(ISerializationContext context, Character_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Copyright_Type returns Copyright
	 *     RootClass returns Copyright
	 *     Copyright returns Copyright
	 *     Copyright_body returns Copyright
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (
	 *             (changeMode_AttrEClass=Copyright_changeMode_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (value_AttrEClass=Copyright_value_AttrEClass EvaluationOperator+=EvaluationOperator*)
	 *         )*
	 *     )
	 */
	protected void sequence_Copyright_body_Copyright_empty(ISerializationContext context, Copyright semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Copyright_changeMode_AttrEClass returns Copyright_changeMode_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=ChangeMode_EnumerationOperator?)
	 */
	protected void sequence_Copyright_changeMode_AttrEClass(ISerializationContext context, Copyright_changeMode_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Copyright_empty returns Copyright
	 *
	 * Constraint:
	 *     {Copyright}
	 */
	protected void sequence_Copyright_empty(ISerializationContext context, Copyright semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Copyright_value_AttrEClass returns Copyright_value_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Copyright_value_AttrEClass(ISerializationContext context, Copyright_value_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Count_AggregationOperator
	 *     Calculateable_Argument returns Count_AggregationOperator
	 *     EvaluationOperation_Argument returns Count_AggregationOperator
	 *     Integer_EvaluationOperation_Argument returns Count_AggregationOperator
	 *     EvaluationOperator returns Count_AggregationOperator
	 *     EvaluationFunctionalOperator returns Count_AggregationOperator
	 *     AggregationOperator returns Count_AggregationOperator
	 *     CountingAggregationOperator returns Count_AggregationOperator
	 *     Count_AggregationOperator returns Count_AggregationOperator
	 *
	 * Constraint:
	 *     (countable=CountableReferenceParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Count_AggregationOperator(ISerializationContext context, Count_AggregationOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CountableReferenceParameter returns CountableReferenceParameter
	 *
	 * Constraint:
	 *     argument=Countable_ReferenceArgument
	 */
	protected void sequence_CountableReferenceParameter(ISerializationContext context, CountableReferenceParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCountableReferenceParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCountableReferenceParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCountableReferenceParameterAccess().getArgumentCountable_ReferenceArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Countable_ReferenceArgument returns Countable_ReferenceArgument
	 *
	 * Constraint:
	 *     reference=[Countable|ID]
	 */
	protected void sequence_Countable_ReferenceArgument(ISerializationContext context, Countable_ReferenceArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCountable_ReferenceArgument_Reference()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCountable_ReferenceArgument_Reference()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCountable_ReferenceArgumentAccess().getReferenceCountableIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QmmPackage.eINSTANCE.getCountable_ReferenceArgument_Reference(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns DateTime_CalculateableElementReferenceArgument
	 *     Calculateable_Argument returns DateTime_CalculateableElementReferenceArgument
	 *     CalculateableElement_ReferenceArgument returns DateTime_CalculateableElementReferenceArgument
	 *     DateTime_CalculateableElementReferenceArgument returns DateTime_CalculateableElementReferenceArgument
	 *
	 * Constraint:
	 *     reference=[DateTime_CalculateableElement|ID]
	 */
	protected void sequence_DateTime_CalculateableElementReferenceArgument(ISerializationContext context, DateTime_CalculateableElementReferenceArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getDateTime_CalculateableElementReferenceArgument_Reference()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getDateTime_CalculateableElementReferenceArgument_Reference()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateTime_CalculateableElementReferenceArgumentAccess().getReferenceDateTime_CalculateableElementIDTerminalRuleCall_2_0_1(), semanticObject.eGet(QmmPackage.eINSTANCE.getDateTime_CalculateableElementReferenceArgument_Reference(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DateTime_CalculateableParameter returns DateTime_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_DateTime_CalculateableParameter(ISerializationContext context, DateTime_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateTime_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DateTime_FunctionalParameter returns DateTime_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_DateTime_FunctionalParameter(ISerializationContext context, DateTime_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateTime_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Description_Type returns Description
	 *     RootClass returns Description
	 *     Description returns Description
	 *     Description_body returns Description
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (
	 *             (changeMode_AttrEClass=Description_changeMode_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (value_AttrEClass=Description_value_AttrEClass EvaluationOperator+=EvaluationOperator*)
	 *         )*
	 *     )
	 */
	protected void sequence_Description_body_Description_empty(ISerializationContext context, Description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description_changeMode_AttrEClass returns Description_changeMode_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=ChangeMode_EnumerationOperator?)
	 */
	protected void sequence_Description_changeMode_AttrEClass(ISerializationContext context, Description_changeMode_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description_empty returns Description
	 *
	 * Constraint:
	 *     {Description}
	 */
	protected void sequence_Description_empty(ISerializationContext context, Description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description_value_AttrEClass returns Description_value_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Description_value_AttrEClass(ISerializationContext context, Description_value_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentRoot_Type returns DocumentRoot
	 *     RootClass returns DocumentRoot
	 *     DocumentRoot returns DocumentRoot
	 *     DocumentRoot_body returns DocumentRoot
	 *
	 * Constraint:
	 *     (EvaluationOperator+=EvaluationOperator | cAEXFile+=DocumentRoot_cAEXFile_OrGroup | mixed_AttrEClass+=DocumentRoot_mixed_AttrEClass)*
	 */
	protected void sequence_DocumentRoot_body_DocumentRoot_empty(ISerializationContext context, DocumentRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentRoot_cAEXFile_OrGroup returns CAEXFile_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=CAEXFile_Type containment+=CAEXFile_Type*)?)
	 */
	protected void sequence_DocumentRoot_cAEXFile_OrGroup(ISerializationContext context, CAEXFile_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentRoot_empty returns DocumentRoot
	 *
	 * Constraint:
	 *     {DocumentRoot}
	 */
	protected void sequence_DocumentRoot_empty(ISerializationContext context, DocumentRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DocumentRoot_mixed_AttrEClass returns DocumentRoot_mixed_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'?)
	 */
	protected void sequence_DocumentRoot_mixed_AttrEClass(ISerializationContext context, DocumentRoot_mixed_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Double_And_BitOperator
	 *     Double_BitOperator returns Double_And_BitOperator
	 *     Double_And_BitOperator returns Double_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Double_ExpressionOperator connects+=Double_ExpressionOperator+)
	 */
	protected void sequence_Double_And_BitOperator(ISerializationContext context, Double_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_CalculateableParameter returns Double_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Double_CalculateableParameter(ISerializationContext context, Double_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDouble_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Double_FunctionalParameter returns Double_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Double_FunctionalParameter(ISerializationContext context, Double_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDouble_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Double_Or_BitOperator
	 *     Double_BitOperator returns Double_Or_BitOperator
	 *     Double_Or_BitOperator returns Double_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Double_ExpressionOperator connects+=Double_ExpressionOperator+)
	 */
	protected void sequence_Double_Or_BitOperator(ISerializationContext context, Double_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns EFeatureMapEntry_CalculateableElementReferenceArgument
	 *     Calculateable_Argument returns EFeatureMapEntry_CalculateableElementReferenceArgument
	 *     CalculateableElement_ReferenceArgument returns EFeatureMapEntry_CalculateableElementReferenceArgument
	 *     EFeatureMapEntry_CalculateableElementReferenceArgument returns EFeatureMapEntry_CalculateableElementReferenceArgument
	 *
	 * Constraint:
	 *     reference=[EFeatureMapEntry_CalculateableElement|ID]
	 */
	protected void sequence_EFeatureMapEntry_CalculateableElementReferenceArgument(ISerializationContext context, EFeatureMapEntry_CalculateableElementReferenceArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getEFeatureMapEntry_CalculateableElementReferenceArgument_Reference()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getEFeatureMapEntry_CalculateableElementReferenceArgument_Reference()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEFeatureMapEntry_CalculateableElementReferenceArgumentAccess().getReferenceEFeatureMapEntry_CalculateableElementIDTerminalRuleCall_2_0_1(), semanticObject.eGet(QmmPackage.eINSTANCE.getEFeatureMapEntry_CalculateableElementReferenceArgument_Reference(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EFeatureMapEntry_CalculateableParameter returns EFeatureMapEntry_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_EFeatureMapEntry_CalculateableParameter(ISerializationContext context, EFeatureMapEntry_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEFeatureMapEntry_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EFeatureMapEntry_FunctionalParameter returns EFeatureMapEntry_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_EFeatureMapEntry_FunctionalParameter(ISerializationContext context, EFeatureMapEntry_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEFeatureMapEntry_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element_Type returns Element
	 *     RootClass returns Element
	 *     Element returns Element
	 *     Element_body returns Element
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (
	 *             (name_AttrEClass=Element_name_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (value_AttrEClass=Element_value_AttrEClass EvaluationOperator+=EvaluationOperator*)
	 *         )*
	 *     )
	 */
	protected void sequence_Element_body_Element_empty(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element_empty returns Element
	 *
	 * Constraint:
	 *     {Element}
	 */
	protected void sequence_Element_empty(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element_name_AttrEClass returns Element_name_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Element_name_AttrEClass(ISerializationContext context, Element_name_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element_value_AttrEClass returns Element_value_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Element_value_AttrEClass(ISerializationContext context, Element_value_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_ExternalInterface_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_ExternalInterface_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_baseClass_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_ExternalInterface_baseClass_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_Type returns ExternalInterface
	 *     CAEXBasicObject_Type returns ExternalInterface
	 *     CAEXObject_Type returns ExternalInterface
	 *     ExternalInterface_Type returns ExternalInterface
	 *     RootClass returns ExternalInterface
	 *     ExternalInterface returns ExternalInterface
	 *     ExternalInterface_body returns ExternalInterface
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             attribute+=InterfaceClass_attribute_OrGroup | 
	 *             interfaceClass+=InterfaceClass_interfaceClass_OrGroup | 
	 *             externalInterface+=ExternalInterface_externalInterface_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup | 
	 *                     externalInterface+=ExternalInterface_externalInterface_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup | 
	 *                     externalInterface+=ExternalInterface_externalInterface_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup | 
	 *                     externalInterface+=ExternalInterface_externalInterface_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=InterfaceClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup | 
	 *                     externalInterface+=ExternalInterface_externalInterface_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_ExternalInterface_body_ExternalInterface_empty(ISerializationContext context, ExternalInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_ExternalInterface_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_ExternalInterface_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_empty returns ExternalInterface
	 *
	 * Constraint:
	 *     {ExternalInterface}
	 */
	protected void sequence_ExternalInterface_empty(ISerializationContext context, ExternalInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_externalInterface_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_ExternalInterface_externalInterface_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_interfaceClass_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_ExternalInterface_interfaceClass_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_ExternalInterface_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalInterface_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_ExternalInterface_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_ExternalReferenceType_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_alias_AttrEClass returns ExternalReferenceType_alias_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_ExternalReferenceType_alias_AttrEClass(ISerializationContext context, ExternalReferenceType_alias_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns ExternalReferenceType
	 *     ExternalReferenceType_Type returns ExternalReferenceType
	 *     RootClass returns ExternalReferenceType
	 *     ExternalReferenceType returns ExternalReferenceType
	 *     ExternalReferenceType_body returns ExternalReferenceType
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 alias_AttrEClass=ExternalReferenceType_alias_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 path_AttrEClass=ExternalReferenceType_path_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_ExternalReferenceType_body_ExternalReferenceType_empty(ISerializationContext context, ExternalReferenceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_ExternalReferenceType_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_ExternalReferenceType_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_empty returns ExternalReferenceType
	 *
	 * Constraint:
	 *     {ExternalReferenceType}
	 */
	protected void sequence_ExternalReferenceType_empty(ISerializationContext context, ExternalReferenceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_path_AttrEClass returns ExternalReferenceType_path_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_ExternalReferenceType_path_AttrEClass(ISerializationContext context, ExternalReferenceType_path_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_ExternalReferenceType_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReferenceType_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_ExternalReferenceType_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Query returns FindQuery
	 *     FindQuery returns FindQuery
	 *
	 * Constraint:
	 *     (where+=RootClass where+=RootClass*)
	 */
	protected void sequence_FindQuery(ISerializationContext context, FindQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Float_And_BitOperator
	 *     Float_BitOperator returns Float_And_BitOperator
	 *     Float_And_BitOperator returns Float_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Float_ExpressionOperator connects+=Float_ExpressionOperator+)
	 */
	protected void sequence_Float_And_BitOperator(ISerializationContext context, Float_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_CalculateableParameter returns Float_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Float_CalculateableParameter(ISerializationContext context, Float_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloat_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Float_FunctionalParameter returns Float_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Float_FunctionalParameter(ISerializationContext context, Float_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloat_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Float_Or_BitOperator
	 *     Float_BitOperator returns Float_Or_BitOperator
	 *     Float_Or_BitOperator returns Float_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Float_ExpressionOperator connects+=Float_ExpressionOperator+)
	 */
	protected void sequence_Float_Or_BitOperator(ISerializationContext context, Float_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericAttribute_Type returns GenericAttribute
	 *     Element_Type returns GenericAttribute
	 *     RootClass returns GenericAttribute
	 *     GenericAttribute returns GenericAttribute
	 *     GenericAttribute_body returns GenericAttribute
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (
	 *             (name_AttrEClass=Element_name_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (value_AttrEClass=Element_value_AttrEClass EvaluationOperator+=EvaluationOperator*)
	 *         )*
	 *     )
	 */
	protected void sequence_GenericAttribute_body_GenericAttribute_empty(ISerializationContext context, GenericAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericAttribute_empty returns GenericAttribute
	 *
	 * Constraint:
	 *     {GenericAttribute}
	 */
	protected void sequence_GenericAttribute_empty(ISerializationContext context, GenericAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericElement_attributeFeatureMap_AttrEClass returns GenericElement_attributeFeatureMap_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'?)
	 */
	protected void sequence_GenericElement_attributeFeatureMap_AttrEClass(ISerializationContext context, GenericElement_attributeFeatureMap_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericElement_attributes_OrGroup returns GenericAttribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=GenericAttribute_Type containment+=GenericAttribute_Type*)?)
	 */
	protected void sequence_GenericElement_attributes_OrGroup(ISerializationContext context, GenericAttribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element_Type returns GenericElement
	 *     GenericElement_Type returns GenericElement
	 *     RootClass returns GenericElement
	 *     GenericElement returns GenericElement
	 *     GenericElement_body returns GenericElement
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             elementFeatureMap_AttrEClass+=GenericElement_elementFeatureMap_AttrEClass | 
	 *             attributeFeatureMap_AttrEClass+=GenericElement_attributeFeatureMap_AttrEClass | 
	 *             attributes+=GenericElement_attributes_OrGroup | 
	 *             nestedElements+=GenericElement_nestedElements_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 name_AttrEClass=Element_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     elementFeatureMap_AttrEClass+=GenericElement_elementFeatureMap_AttrEClass | 
	 *                     attributeFeatureMap_AttrEClass+=GenericElement_attributeFeatureMap_AttrEClass | 
	 *                     attributes+=GenericElement_attributes_OrGroup | 
	 *                     nestedElements+=GenericElement_nestedElements_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 value_AttrEClass=Element_value_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     elementFeatureMap_AttrEClass+=GenericElement_elementFeatureMap_AttrEClass | 
	 *                     attributeFeatureMap_AttrEClass+=GenericElement_attributeFeatureMap_AttrEClass | 
	 *                     attributes+=GenericElement_attributes_OrGroup | 
	 *                     nestedElements+=GenericElement_nestedElements_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_GenericElement_body_GenericElement_empty(ISerializationContext context, GenericElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericElement_elementFeatureMap_AttrEClass returns GenericElement_elementFeatureMap_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'?)
	 */
	protected void sequence_GenericElement_elementFeatureMap_AttrEClass(ISerializationContext context, GenericElement_elementFeatureMap_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericElement_empty returns GenericElement
	 *
	 * Constraint:
	 *     {GenericElement}
	 */
	protected void sequence_GenericElement_empty(ISerializationContext context, GenericElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericElement_nestedElements_OrGroup returns GenericElement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=GenericElement_Type containment+=GenericElement_Type*)?)
	 */
	protected void sequence_GenericElement_nestedElements_OrGroup(ISerializationContext context, GenericElement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_InstanceHierarchy_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns InstanceHierarchy
	 *     CAEXObject_Type returns InstanceHierarchy
	 *     InstanceHierarchy_Type returns InstanceHierarchy
	 *     RootClass returns InstanceHierarchy
	 *     InstanceHierarchy returns InstanceHierarchy
	 *     InstanceHierarchy_body returns InstanceHierarchy
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             internalElement+=InstanceHierarchy_internalElement_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     internalElement+=InstanceHierarchy_internalElement_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     internalElement+=InstanceHierarchy_internalElement_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     internalElement+=InstanceHierarchy_internalElement_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_InstanceHierarchy_body_InstanceHierarchy_empty(ISerializationContext context, InstanceHierarchy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_InstanceHierarchy_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_InstanceHierarchy_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy_empty returns InstanceHierarchy
	 *
	 * Constraint:
	 *     {InstanceHierarchy}
	 */
	protected void sequence_InstanceHierarchy_empty(ISerializationContext context, InstanceHierarchy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy_internalElement_OrGroup returns InternalElement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InternalElement_Type containment+=InternalElement_Type*)?)
	 */
	protected void sequence_InstanceHierarchy_internalElement_OrGroup(ISerializationContext context, InternalElement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_InstanceHierarchy_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_InstanceHierarchy_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns IntegerParseInt_ClassOperator
	 *     Calculateable_Argument returns IntegerParseInt_ClassOperator
	 *     EvaluationOperation_Argument returns IntegerParseInt_ClassOperator
	 *     Integer_EvaluationOperation_Argument returns IntegerParseInt_ClassOperator
	 *     EvaluationOperator returns IntegerParseInt_ClassOperator
	 *     EvaluationFunctionalOperator returns IntegerParseInt_ClassOperator
	 *     ClassOperator returns IntegerParseInt_ClassOperator
	 *     IntegerParseInt_ClassOperator returns IntegerParseInt_ClassOperator
	 *
	 * Constraint:
	 *     (calculateable=String_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_IntegerParseInt_ClassOperator(ISerializationContext context, IntegerParseInt_ClassOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Integer_And_BitOperator
	 *     Integer_BitOperator returns Integer_And_BitOperator
	 *     Integer_And_BitOperator returns Integer_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Integer_ExpressionOperator connects+=Integer_ExpressionOperator+)
	 */
	protected void sequence_Integer_And_BitOperator(ISerializationContext context, Integer_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_CalculateableParameter returns Integer_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Integer_CalculateableParameter(ISerializationContext context, Integer_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteger_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer_FunctionalParameter returns Integer_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Integer_FunctionalParameter(ISerializationContext context, Integer_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteger_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Integer_Or_BitOperator
	 *     Integer_BitOperator returns Integer_Or_BitOperator
	 *     Integer_Or_BitOperator returns Integer_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Integer_ExpressionOperator connects+=Integer_ExpressionOperator+)
	 */
	protected void sequence_Integer_Or_BitOperator(ISerializationContext context, Integer_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Integer_PrimitiveArgument
	 *     PrimitiveArgument returns Integer_PrimitiveArgument
	 *     Integer_PrimitiveArgument returns Integer_PrimitiveArgument
	 *
	 * Constraint:
	 *     (value=INT operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Integer_PrimitiveArgument(ISerializationContext context, Integer_PrimitiveArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_InterfaceClassLib_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns InterfaceClassLib
	 *     CAEXObject_Type returns InterfaceClassLib
	 *     InterfaceClassLib_Type returns InterfaceClassLib
	 *     RootClass returns InterfaceClassLib
	 *     InterfaceClassLib returns InterfaceClassLib
	 *     InterfaceClassLib_body returns InterfaceClassLib
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             interfaceClass+=InterfaceClassLib_interfaceClass_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     interfaceClass+=InterfaceClassLib_interfaceClass_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     interfaceClass+=InterfaceClassLib_interfaceClass_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     interfaceClass+=InterfaceClassLib_interfaceClass_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_InterfaceClassLib_body_InterfaceClassLib_empty(ISerializationContext context, InterfaceClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_InterfaceClassLib_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_InterfaceClassLib_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib_empty returns InterfaceClassLib
	 *
	 * Constraint:
	 *     {InterfaceClassLib}
	 */
	protected void sequence_InterfaceClassLib_empty(ISerializationContext context, InterfaceClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib_interfaceClass_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_InterfaceClassLib_interfaceClass_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_InterfaceClassLib_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_InterfaceClassLib_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_InterfaceClass_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_InterfaceClass_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_baseClass_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_InterfaceClass_baseClass_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_Type returns InterfaceClass
	 *     CAEXBasicObject_Type returns InterfaceClass
	 *     CAEXObject_Type returns InterfaceClass
	 *     RootClass returns InterfaceClass
	 *     InterfaceClass returns InterfaceClass
	 *     InterfaceClass_body returns InterfaceClass
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             attribute+=InterfaceClass_attribute_OrGroup | 
	 *             interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=InterfaceClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_InterfaceClass_body_InterfaceClass_empty(ISerializationContext context, InterfaceClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_InterfaceClass_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_InterfaceClass_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_empty returns InterfaceClass
	 *
	 * Constraint:
	 *     {InterfaceClass}
	 */
	protected void sequence_InterfaceClass_empty(ISerializationContext context, InterfaceClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_interfaceClass_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_InterfaceClass_interfaceClass_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_refBaseClassPath_AttrEClass returns InterfaceClass_refBaseClassPath_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_InterfaceClass_refBaseClassPath_AttrEClass(ISerializationContext context, InterfaceClass_refBaseClassPath_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_InterfaceClass_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_InterfaceClass_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_InterfaceFamily_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_InterfaceFamily_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_baseClass_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_InterfaceFamily_baseClass_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass_Type returns InterfaceFamily
	 *     InterfaceFamily_Type returns InterfaceFamily
	 *     CAEXBasicObject_Type returns InterfaceFamily
	 *     CAEXObject_Type returns InterfaceFamily
	 *     RootClass returns InterfaceFamily
	 *     InterfaceFamily returns InterfaceFamily
	 *     InterfaceFamily_body returns InterfaceFamily
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             attribute+=InterfaceClass_attribute_OrGroup | 
	 *             interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=InterfaceClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     baseClass+=InterfaceClass_baseClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     attribute+=InterfaceClass_attribute_OrGroup | 
	 *                     interfaceClass+=InterfaceClass_interfaceClass_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_InterfaceFamily_body_InterfaceFamily_empty(ISerializationContext context, InterfaceFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_InterfaceFamily_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_InterfaceFamily_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_empty returns InterfaceFamily
	 *
	 * Constraint:
	 *     {InterfaceFamily}
	 */
	protected void sequence_InterfaceFamily_empty(ISerializationContext context, InterfaceFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_interfaceClass_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_InterfaceFamily_interfaceClass_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_InterfaceFamily_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceFamily_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_InterfaceFamily_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_InterfaceIDMapping_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns InterfaceIDMapping
	 *     InterfaceIDMapping_Type returns InterfaceIDMapping
	 *     RootClass returns InterfaceIDMapping
	 *     InterfaceIDMapping returns InterfaceIDMapping
	 *     InterfaceIDMapping_body returns InterfaceIDMapping
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             roleInterface+=InterfaceIDMapping_roleInterface_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             systemUnitInterface+=InterfaceIDMapping_systemUnitInterface_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 roleInterfaceID_AttrEClass=InterfaceIDMapping_roleInterfaceID_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     roleInterface+=InterfaceIDMapping_roleInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     systemUnitInterface+=InterfaceIDMapping_systemUnitInterface_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 systemUnitInterfaceID_AttrEClass=InterfaceIDMapping_systemUnitInterfaceID_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     roleInterface+=InterfaceIDMapping_roleInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     systemUnitInterface+=InterfaceIDMapping_systemUnitInterface_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     roleInterface+=InterfaceIDMapping_roleInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     systemUnitInterface+=InterfaceIDMapping_systemUnitInterface_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_InterfaceIDMapping_body_InterfaceIDMapping_empty(ISerializationContext context, InterfaceIDMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_InterfaceIDMapping_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_InterfaceIDMapping_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_empty returns InterfaceIDMapping
	 *
	 * Constraint:
	 *     {InterfaceIDMapping}
	 */
	protected void sequence_InterfaceIDMapping_empty(ISerializationContext context, InterfaceIDMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_InterfaceIDMapping_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_roleInterfaceID_AttrEClass returns InterfaceIDMapping_roleInterfaceID_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_InterfaceIDMapping_roleInterfaceID_AttrEClass(ISerializationContext context, InterfaceIDMapping_roleInterfaceID_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_roleInterface_OrGroup returns ExternalInterface_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=ExternalInterface_Type containment+=ExternalInterface_Type*)?)
	 */
	protected void sequence_InterfaceIDMapping_roleInterface_OrGroup(ISerializationContext context, ExternalInterface_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_systemUnitInterfaceID_AttrEClass returns InterfaceIDMapping_systemUnitInterfaceID_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_InterfaceIDMapping_systemUnitInterfaceID_AttrEClass(ISerializationContext context, InterfaceIDMapping_systemUnitInterfaceID_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_systemUnitInterface_OrGroup returns ExternalInterface_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=ExternalInterface_Type containment+=ExternalInterface_Type*)?)
	 */
	protected void sequence_InterfaceIDMapping_systemUnitInterface_OrGroup(ISerializationContext context, ExternalInterface_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceIDMapping_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_InterfaceIDMapping_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_InternalElement_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_InternalElement_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_baseClass_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_InternalElement_baseClass_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_baseSystemUnit_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_InternalElement_baseSystemUnit_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns InternalElement
	 *     CAEXObject_Type returns InternalElement
	 *     InternalElement_Type returns InternalElement
	 *     SystemUnitClass_Type returns InternalElement
	 *     RootClass returns InternalElement
	 *     InternalElement returns InternalElement
	 *     InternalElement_body returns InternalElement
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             attribute+=SystemUnitClass_attribute_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *             systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup | 
	 *             internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *             baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *             baseSystemUnit+=InternalElement_baseSystemUnit_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *             roleRequirements+=InternalElement_roleRequirements_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     baseSystemUnit+=InternalElement_baseSystemUnit_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     roleRequirements+=InternalElement_roleRequirements_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     baseSystemUnit+=InternalElement_baseSystemUnit_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     roleRequirements+=InternalElement_roleRequirements_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseSystemUnitPath_AttrEClass=InternalElement_refBaseSystemUnitPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     baseSystemUnit+=InternalElement_baseSystemUnit_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     roleRequirements+=InternalElement_roleRequirements_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=SystemUnitClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     baseSystemUnit+=InternalElement_baseSystemUnit_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     roleRequirements+=InternalElement_roleRequirements_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     baseSystemUnit+=InternalElement_baseSystemUnit_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     roleRequirements+=InternalElement_roleRequirements_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_InternalElement_body_InternalElement_empty(ISerializationContext context, InternalElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_InternalElement_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_InternalElement_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_empty returns InternalElement
	 *
	 * Constraint:
	 *     {InternalElement}
	 */
	protected void sequence_InternalElement_empty(ISerializationContext context, InternalElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_externalInterface_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_InternalElement_externalInterface_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_internalElement_OrGroup returns InternalElement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InternalElement_Type containment+=InternalElement_Type*)?)
	 */
	protected void sequence_InternalElement_internalElement_OrGroup(ISerializationContext context, InternalElement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_internalLink_OrGroup returns InternalLink_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InternalLink_Type containment+=InternalLink_Type*)?)
	 */
	protected void sequence_InternalElement_internalLink_OrGroup(ISerializationContext context, InternalLink_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_refBaseSystemUnitPath_AttrEClass returns InternalElement_refBaseSystemUnitPath_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_InternalElement_refBaseSystemUnitPath_AttrEClass(ISerializationContext context, InternalElement_refBaseSystemUnitPath_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_InternalElement_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_roleRequirements_OrGroup returns RoleRequirements_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleRequirements_Type containment+=RoleRequirements_Type*)?)
	 */
	protected void sequence_InternalElement_roleRequirements_OrGroup(ISerializationContext context, RoleRequirements_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_supportedRoleClass_OrGroup returns SupportedRoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SupportedRoleClass_Type containment+=SupportedRoleClass_Type*)?)
	 */
	protected void sequence_InternalElement_supportedRoleClass_OrGroup(ISerializationContext context, SupportedRoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_systemUnitClass_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_InternalElement_systemUnitClass_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalElement_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_InternalElement_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_InternalLink_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns InternalLink
	 *     InternalLink_Type returns InternalLink
	 *     CAEXObject_Type returns InternalLink
	 *     RootClass returns InternalLink
	 *     InternalLink returns InternalLink
	 *     InternalLink_body returns InternalLink
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             partnerSideA+=InternalLink_partnerSideA_OrGroup | 
	 *             partnerSideB+=InternalLink_partnerSideB_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     partnerSideA+=InternalLink_partnerSideA_OrGroup | 
	 *                     partnerSideB+=InternalLink_partnerSideB_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     partnerSideA+=InternalLink_partnerSideA_OrGroup | 
	 *                     partnerSideB+=InternalLink_partnerSideB_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     partnerSideA+=InternalLink_partnerSideA_OrGroup | 
	 *                     partnerSideB+=InternalLink_partnerSideB_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refPartnerSideB_AttrEClass=InternalLink_refPartnerSideB_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     partnerSideA+=InternalLink_partnerSideA_OrGroup | 
	 *                     partnerSideB+=InternalLink_partnerSideB_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refPartnerSideA_AttrEClass=InternalLink_refPartnerSideA_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     partnerSideA+=InternalLink_partnerSideA_OrGroup | 
	 *                     partnerSideB+=InternalLink_partnerSideB_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_InternalLink_body_InternalLink_empty(ISerializationContext context, InternalLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_InternalLink_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_InternalLink_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_empty returns InternalLink
	 *
	 * Constraint:
	 *     {InternalLink}
	 */
	protected void sequence_InternalLink_empty(ISerializationContext context, InternalLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_partnerSideA_OrGroup returns ExternalInterface_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=ExternalInterface_Type containment+=ExternalInterface_Type*)?)
	 */
	protected void sequence_InternalLink_partnerSideA_OrGroup(ISerializationContext context, ExternalInterface_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_partnerSideB_OrGroup returns ExternalInterface_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=ExternalInterface_Type containment+=ExternalInterface_Type*)?)
	 */
	protected void sequence_InternalLink_partnerSideB_OrGroup(ISerializationContext context, ExternalInterface_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_refPartnerSideA_AttrEClass returns InternalLink_refPartnerSideA_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_InternalLink_refPartnerSideA_AttrEClass(ISerializationContext context, InternalLink_refPartnerSideA_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_refPartnerSideB_AttrEClass returns InternalLink_refPartnerSideB_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_InternalLink_refPartnerSideB_AttrEClass(ISerializationContext context, InternalLink_refPartnerSideB_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_InternalLink_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_InternalLink_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Long_And_BitOperator
	 *     Long_BitOperator returns Long_And_BitOperator
	 *     Long_And_BitOperator returns Long_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Long_ExpressionOperator connects+=Long_ExpressionOperator+)
	 */
	protected void sequence_Long_And_BitOperator(ISerializationContext context, Long_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_CalculateableParameter returns Long_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Long_CalculateableParameter(ISerializationContext context, Long_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLong_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Long_FunctionalParameter returns Long_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Long_FunctionalParameter(ISerializationContext context, Long_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLong_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Long_Or_BitOperator
	 *     Long_BitOperator returns Long_Or_BitOperator
	 *     Long_Or_BitOperator returns Long_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Long_ExpressionOperator connects+=Long_ExpressionOperator+)
	 */
	protected void sequence_Long_Or_BitOperator(ISerializationContext context, Long_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_Mapping_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_attributeNameMapping_OrGroup returns AttributeNameMapping_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AttributeNameMapping_Type containment+=AttributeNameMapping_Type*)?)
	 */
	protected void sequence_Mapping_attributeNameMapping_OrGroup(ISerializationContext context, AttributeNameMapping_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_Type returns Mapping
	 *     CAEXBasicObject_Type returns Mapping
	 *     RootClass returns Mapping
	 *     Mapping returns Mapping
	 *     Mapping_body returns Mapping
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             attributeNameMapping+=Mapping_attributeNameMapping_OrGroup | 
	 *             interfaceIDMapping+=Mapping_interfaceIDMapping_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *             (
	 *                 EvaluationOperator+=EvaluationOperator | 
	 *                 copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                 attributeNameMapping+=Mapping_attributeNameMapping_OrGroup | 
	 *                 interfaceIDMapping+=Mapping_interfaceIDMapping_OrGroup | 
	 *                 description+=CAEXBasicObject_description_OrGroup | 
	 *                 additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                 revision+=CAEXBasicObject_revision_OrGroup | 
	 *                 version+=CAEXBasicObject_version_OrGroup
	 *             )*
	 *         )?
	 *     )
	 */
	protected void sequence_Mapping_body_Mapping_empty(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_Mapping_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_Mapping_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_empty returns Mapping
	 *
	 * Constraint:
	 *     {Mapping}
	 */
	protected void sequence_Mapping_empty(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_interfaceIDMapping_OrGroup returns InterfaceIDMapping_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceIDMapping_Type containment+=InterfaceIDMapping_Type*)?)
	 */
	protected void sequence_Mapping_interfaceIDMapping_OrGroup(ISerializationContext context, InterfaceIDMapping_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_Mapping_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_Mapping_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Max_AggregationOperator
	 *     Calculateable_Argument returns Max_AggregationOperator
	 *     EvaluationOperation_Argument returns Max_AggregationOperator
	 *     Integer_EvaluationOperation_Argument returns Max_AggregationOperator
	 *     EvaluationOperator returns Max_AggregationOperator
	 *     EvaluationFunctionalOperator returns Max_AggregationOperator
	 *     AggregationOperator returns Max_AggregationOperator
	 *     CalculatingAggregationOperator returns Max_AggregationOperator
	 *     Max_AggregationOperator returns Max_AggregationOperator
	 *
	 * Constraint:
	 *     (calculateable=Integer_CalculateableParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Max_AggregationOperator(ISerializationContext context, Max_AggregationOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Min_AggregationOperator
	 *     Calculateable_Argument returns Min_AggregationOperator
	 *     EvaluationOperation_Argument returns Min_AggregationOperator
	 *     Integer_EvaluationOperation_Argument returns Min_AggregationOperator
	 *     EvaluationOperator returns Min_AggregationOperator
	 *     EvaluationFunctionalOperator returns Min_AggregationOperator
	 *     AggregationOperator returns Min_AggregationOperator
	 *     CalculatingAggregationOperator returns Min_AggregationOperator
	 *     Min_AggregationOperator returns Min_AggregationOperator
	 *
	 * Constraint:
	 *     (calculateable=Integer_CalculateableParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Min_AggregationOperator(ISerializationContext context, Min_AggregationOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NominalScaledType_Type returns NominalScaledType
	 *     RootClass returns NominalScaledType
	 *     NominalScaledType returns NominalScaledType
	 *     NominalScaledType_body returns NominalScaledType
	 *
	 * Constraint:
	 *     (EvaluationOperator+=EvaluationOperator | requiredValue_AttrEClass+=NominalScaledType_requiredValue_AttrEClass)*
	 */
	protected void sequence_NominalScaledType_body_NominalScaledType_empty(ISerializationContext context, NominalScaledType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NominalScaledType_empty returns NominalScaledType
	 *
	 * Constraint:
	 *     {NominalScaledType}
	 */
	protected void sequence_NominalScaledType_empty(ISerializationContext context, NominalScaledType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NominalScaledType_requiredValue_AttrEClass returns NominalScaledType_requiredValue_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_NominalScaledType_requiredValue_AttrEClass(ISerializationContext context, NominalScaledType_requiredValue_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Number_And_BitOperator
	 *     Number_BitOperator returns Number_And_BitOperator
	 *     Number_And_BitOperator returns Number_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Number_ExpressionOperator connects+=Number_ExpressionOperator+)
	 */
	protected void sequence_Number_And_BitOperator(ISerializationContext context, Number_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_CalculateableParameter returns Number_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Number_CalculateableParameter(ISerializationContext context, Number_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumber_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_Object_Number_equals_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_Object_Number_equals_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_Object_Number_equals_FunctionalOperator
	 *     Number_Double_Object_Number_equals_FunctionalOperator returns Number_Double_Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_Object_Number_equals_FunctionalOperator(ISerializationContext context, Number_Double_Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_Object_Number_toString_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_Object_Number_toString_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_Object_Number_toString_FunctionalOperator
	 *     Number_Double_Object_Number_toString_FunctionalOperator returns Number_Double_Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Number_Double_Object_Number_toString_FunctionalOperator(ISerializationContext context, Number_Double_Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_greaterEquals_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_greaterEquals_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_greaterEquals_FunctionalOperator
	 *     Number_Double_greaterEquals_FunctionalOperator returns Number_Double_greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_greaterEquals_FunctionalOperator(ISerializationContext context, Number_Double_greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_greaterThan_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_greaterThan_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_greaterThan_FunctionalOperator
	 *     Number_Double_greaterThan_FunctionalOperator returns Number_Double_greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_greaterThan_FunctionalOperator(ISerializationContext context, Number_Double_greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_smallerEquals_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_smallerEquals_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_smallerEquals_FunctionalOperator
	 *     Number_Double_smallerEquals_FunctionalOperator returns Number_Double_smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_smallerEquals_FunctionalOperator(ISerializationContext context, Number_Double_smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_smallerThan_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_smallerThan_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_smallerThan_FunctionalOperator
	 *     Number_Double_smallerThan_FunctionalOperator returns Number_Double_smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_smallerThan_FunctionalOperator(ISerializationContext context, Number_Double_smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Number_Float_Object_Number_equals_FunctionalOperator
	 *     Float_FunctionalOperator_Begin returns Number_Float_Object_Number_equals_FunctionalOperator
	 *     Float_FunctionalOperator returns Number_Float_Object_Number_equals_FunctionalOperator
	 *     Number_Float_Object_Number_equals_FunctionalOperator returns Number_Float_Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Float_Object_Number_equals_FunctionalOperator(ISerializationContext context, Number_Float_Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Number_Float_Object_Number_toString_FunctionalOperator
	 *     Float_FunctionalOperator_Begin returns Number_Float_Object_Number_toString_FunctionalOperator
	 *     Float_FunctionalOperator returns Number_Float_Object_Number_toString_FunctionalOperator
	 *     Number_Float_Object_Number_toString_FunctionalOperator returns Number_Float_Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Number_Float_Object_Number_toString_FunctionalOperator(ISerializationContext context, Number_Float_Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Number_Float_greaterEquals_FunctionalOperator
	 *     Float_FunctionalOperator_Begin returns Number_Float_greaterEquals_FunctionalOperator
	 *     Float_FunctionalOperator returns Number_Float_greaterEquals_FunctionalOperator
	 *     Number_Float_greaterEquals_FunctionalOperator returns Number_Float_greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Float_greaterEquals_FunctionalOperator(ISerializationContext context, Number_Float_greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Number_Float_greaterThan_FunctionalOperator
	 *     Float_FunctionalOperator_Begin returns Number_Float_greaterThan_FunctionalOperator
	 *     Float_FunctionalOperator returns Number_Float_greaterThan_FunctionalOperator
	 *     Number_Float_greaterThan_FunctionalOperator returns Number_Float_greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Float_greaterThan_FunctionalOperator(ISerializationContext context, Number_Float_greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Number_Float_smallerEquals_FunctionalOperator
	 *     Float_FunctionalOperator_Begin returns Number_Float_smallerEquals_FunctionalOperator
	 *     Float_FunctionalOperator returns Number_Float_smallerEquals_FunctionalOperator
	 *     Number_Float_smallerEquals_FunctionalOperator returns Number_Float_smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Float_smallerEquals_FunctionalOperator(ISerializationContext context, Number_Float_smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_ExpressionOperator returns Number_Float_smallerThan_FunctionalOperator
	 *     Float_FunctionalOperator_Begin returns Number_Float_smallerThan_FunctionalOperator
	 *     Float_FunctionalOperator returns Number_Float_smallerThan_FunctionalOperator
	 *     Number_Float_smallerThan_FunctionalOperator returns Number_Float_smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Float_smallerThan_FunctionalOperator(ISerializationContext context, Number_Float_smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_FunctionalParameter returns Number_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Number_FunctionalParameter(ISerializationContext context, Number_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumber_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *     Number_Integer_Object_Number_equals_FunctionalOperator returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_Object_Number_equals_FunctionalOperator(ISerializationContext context, Number_Integer_Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *     Number_Integer_Object_Number_toString_FunctionalOperator returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Number_Integer_Object_Number_toString_FunctionalOperator(ISerializationContext context, Number_Integer_Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_greaterEquals_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_greaterEquals_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_greaterEquals_FunctionalOperator
	 *     Number_Integer_greaterEquals_FunctionalOperator returns Number_Integer_greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_greaterEquals_FunctionalOperator(ISerializationContext context, Number_Integer_greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_greaterThan_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_greaterThan_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_greaterThan_FunctionalOperator
	 *     Number_Integer_greaterThan_FunctionalOperator returns Number_Integer_greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_greaterThan_FunctionalOperator(ISerializationContext context, Number_Integer_greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_smallerEquals_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_smallerEquals_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_smallerEquals_FunctionalOperator
	 *     Number_Integer_smallerEquals_FunctionalOperator returns Number_Integer_smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_smallerEquals_FunctionalOperator(ISerializationContext context, Number_Integer_smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_smallerThan_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_smallerThan_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_smallerThan_FunctionalOperator
	 *     Number_Integer_smallerThan_FunctionalOperator returns Number_Integer_smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_smallerThan_FunctionalOperator(ISerializationContext context, Number_Integer_smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Number_Long_Object_Number_equals_FunctionalOperator
	 *     Long_FunctionalOperator_Begin returns Number_Long_Object_Number_equals_FunctionalOperator
	 *     Long_FunctionalOperator returns Number_Long_Object_Number_equals_FunctionalOperator
	 *     Number_Long_Object_Number_equals_FunctionalOperator returns Number_Long_Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Long_Object_Number_equals_FunctionalOperator(ISerializationContext context, Number_Long_Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Number_Long_Object_Number_toString_FunctionalOperator
	 *     Long_FunctionalOperator_Begin returns Number_Long_Object_Number_toString_FunctionalOperator
	 *     Long_FunctionalOperator returns Number_Long_Object_Number_toString_FunctionalOperator
	 *     Number_Long_Object_Number_toString_FunctionalOperator returns Number_Long_Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Number_Long_Object_Number_toString_FunctionalOperator(ISerializationContext context, Number_Long_Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Number_Long_greaterEquals_FunctionalOperator
	 *     Long_FunctionalOperator_Begin returns Number_Long_greaterEquals_FunctionalOperator
	 *     Long_FunctionalOperator returns Number_Long_greaterEquals_FunctionalOperator
	 *     Number_Long_greaterEquals_FunctionalOperator returns Number_Long_greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Long_greaterEquals_FunctionalOperator(ISerializationContext context, Number_Long_greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Number_Long_greaterThan_FunctionalOperator
	 *     Long_FunctionalOperator_Begin returns Number_Long_greaterThan_FunctionalOperator
	 *     Long_FunctionalOperator returns Number_Long_greaterThan_FunctionalOperator
	 *     Number_Long_greaterThan_FunctionalOperator returns Number_Long_greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Long_greaterThan_FunctionalOperator(ISerializationContext context, Number_Long_greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Number_Long_smallerEquals_FunctionalOperator
	 *     Long_FunctionalOperator_Begin returns Number_Long_smallerEquals_FunctionalOperator
	 *     Long_FunctionalOperator returns Number_Long_smallerEquals_FunctionalOperator
	 *     Number_Long_smallerEquals_FunctionalOperator returns Number_Long_smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Long_smallerEquals_FunctionalOperator(ISerializationContext context, Number_Long_smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Long_ExpressionOperator returns Number_Long_smallerThan_FunctionalOperator
	 *     Long_FunctionalOperator_Begin returns Number_Long_smallerThan_FunctionalOperator
	 *     Long_FunctionalOperator returns Number_Long_smallerThan_FunctionalOperator
	 *     Number_Long_smallerThan_FunctionalOperator returns Number_Long_smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Long_smallerThan_FunctionalOperator(ISerializationContext context, Number_Long_smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Number_Or_BitOperator
	 *     Number_BitOperator returns Number_Or_BitOperator
	 *     Number_Or_BitOperator returns Number_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Number_ExpressionOperator connects+=Number_ExpressionOperator+)
	 */
	protected void sequence_Number_Or_BitOperator(ISerializationContext context, Number_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns Object_And_BitOperator
	 *     Object_BitOperator returns Object_And_BitOperator
	 *     Object_And_BitOperator returns Object_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Object_ExpressionOperator connects+=Object_ExpressionOperator+)
	 */
	protected void sequence_Object_And_BitOperator(ISerializationContext context, Object_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Object_Boolean_equals_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns Object_Boolean_equals_FunctionalOperator
	 *     Boolean_FunctionalOperator returns Object_Boolean_equals_FunctionalOperator
	 *     Object_Boolean_equals_FunctionalOperator returns Object_Boolean_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_Boolean_equals_FunctionalOperator(ISerializationContext context, Object_Boolean_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Object_Boolean_toString_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns Object_Boolean_toString_FunctionalOperator
	 *     Boolean_FunctionalOperator returns Object_Boolean_toString_FunctionalOperator
	 *     Object_Boolean_toString_FunctionalOperator returns Object_Boolean_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_Boolean_toString_FunctionalOperator(ISerializationContext context, Object_Boolean_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_CalculateableParameter returns Object_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Object_CalculateableParameter(ISerializationContext context, Object_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObject_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns Object_CharSequence_equals_FunctionalOperator
	 *     CharSequence_FunctionalOperator_Begin returns Object_CharSequence_equals_FunctionalOperator
	 *     CharSequence_FunctionalOperator returns Object_CharSequence_equals_FunctionalOperator
	 *     Object_CharSequence_equals_FunctionalOperator returns Object_CharSequence_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_CharSequence_equals_FunctionalOperator(ISerializationContext context, Object_CharSequence_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns Object_CharSequence_toString_FunctionalOperator
	 *     CharSequence_FunctionalOperator_Begin returns Object_CharSequence_toString_FunctionalOperator
	 *     CharSequence_FunctionalOperator returns Object_CharSequence_toString_FunctionalOperator
	 *     Object_CharSequence_toString_FunctionalOperator returns Object_CharSequence_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_CharSequence_toString_FunctionalOperator(ISerializationContext context, Object_CharSequence_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Object_Character_equals_FunctionalOperator
	 *     Character_FunctionalOperator_Begin returns Object_Character_equals_FunctionalOperator
	 *     Character_FunctionalOperator returns Object_Character_equals_FunctionalOperator
	 *     Object_Character_equals_FunctionalOperator returns Object_Character_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_Character_equals_FunctionalOperator(ISerializationContext context, Object_Character_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Object_Character_toString_FunctionalOperator
	 *     Character_FunctionalOperator_Begin returns Object_Character_toString_FunctionalOperator
	 *     Character_FunctionalOperator returns Object_Character_toString_FunctionalOperator
	 *     Object_Character_toString_FunctionalOperator returns Object_Character_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_Character_toString_FunctionalOperator(ISerializationContext context, Object_Character_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_FunctionalParameter returns Object_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Object_FunctionalParameter(ISerializationContext context, Object_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObject_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Object_Number_equals_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns Object_Number_equals_FunctionalOperator
	 *     Number_FunctionalOperator returns Object_Number_equals_FunctionalOperator
	 *     Object_Number_equals_FunctionalOperator returns Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_Number_equals_FunctionalOperator(ISerializationContext context, Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Object_Number_toString_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns Object_Number_toString_FunctionalOperator
	 *     Number_FunctionalOperator returns Object_Number_toString_FunctionalOperator
	 *     Object_Number_toString_FunctionalOperator returns Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_Number_toString_FunctionalOperator(ISerializationContext context, Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns Object_Or_BitOperator
	 *     Object_BitOperator returns Object_Or_BitOperator
	 *     Object_Or_BitOperator returns Object_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Object_ExpressionOperator connects+=Object_ExpressionOperator+)
	 */
	protected void sequence_Object_Or_BitOperator(ISerializationContext context, Object_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvaluationOperator returns Or_EvaluationBitOperator
	 *     EvaluationBitOperator returns Or_EvaluationBitOperator
	 *     Or_EvaluationBitOperator returns Or_EvaluationBitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=EvaluationOperator connects+=EvaluationOperator+)
	 */
	protected void sequence_Or_EvaluationBitOperator(ISerializationContext context, Or_EvaluationBitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrdinalScaledType_Type returns OrdinalScaledType
	 *     RootClass returns OrdinalScaledType
	 *     OrdinalScaledType returns OrdinalScaledType
	 *     OrdinalScaledType_body returns OrdinalScaledType
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (
	 *             (requiredMinValue_AttrEClass=OrdinalScaledType_requiredMinValue_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (requiredValue_AttrEClass=OrdinalScaledType_requiredValue_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (requiredMaxValue_AttrEClass=OrdinalScaledType_requiredMaxValue_AttrEClass EvaluationOperator+=EvaluationOperator*)
	 *         )*
	 *     )
	 */
	protected void sequence_OrdinalScaledType_body_OrdinalScaledType_empty(ISerializationContext context, OrdinalScaledType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrdinalScaledType_empty returns OrdinalScaledType
	 *
	 * Constraint:
	 *     {OrdinalScaledType}
	 */
	protected void sequence_OrdinalScaledType_empty(ISerializationContext context, OrdinalScaledType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrdinalScaledType_requiredMaxValue_AttrEClass returns OrdinalScaledType_requiredMaxValue_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_OrdinalScaledType_requiredMaxValue_AttrEClass(ISerializationContext context, OrdinalScaledType_requiredMaxValue_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrdinalScaledType_requiredMinValue_AttrEClass returns OrdinalScaledType_requiredMinValue_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_OrdinalScaledType_requiredMinValue_AttrEClass(ISerializationContext context, OrdinalScaledType_requiredMinValue_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrdinalScaledType_requiredValue_AttrEClass returns OrdinalScaledType_requiredValue_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_OrdinalScaledType_requiredValue_AttrEClass(ISerializationContext context, OrdinalScaledType_requiredValue_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_RefSemantic_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns RefSemantic
	 *     RefSemantic_Type returns RefSemantic
	 *     RootClass returns RefSemantic
	 *     RefSemantic returns RefSemantic
	 *     RefSemantic_body returns RefSemantic
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 correspondingAttributePath_AttrEClass=RefSemantic_correspondingAttributePath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_RefSemantic_body_RefSemantic_empty(ISerializationContext context, RefSemantic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_RefSemantic_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic_correspondingAttributePath_AttrEClass returns RefSemantic_correspondingAttributePath_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_RefSemantic_correspondingAttributePath_AttrEClass(ISerializationContext context, RefSemantic_correspondingAttributePath_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_RefSemantic_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic_empty returns RefSemantic
	 *
	 * Constraint:
	 *     {RefSemantic}
	 */
	protected void sequence_RefSemantic_empty(ISerializationContext context, RefSemantic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_RefSemantic_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_RefSemantic_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_Revision_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_authorName_AttrEClass returns Revision_authorName_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Revision_authorName_AttrEClass(ISerializationContext context, Revision_authorName_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns Revision
	 *     Revision_Type returns Revision
	 *     RootClass returns Revision
	 *     Revision returns Revision
	 *     Revision_body returns Revision
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 authorName_AttrEClass=Revision_authorName_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 newVersion_AttrEClass=Revision_newVersion_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 revisionDate_AttrEClass=Revision_revisionDate_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 comment_AttrEClass=Revision_comment_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 oldVersion_AttrEClass=Revision_oldVersion_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_Revision_body_Revision_empty(ISerializationContext context, Revision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_comment_AttrEClass returns Revision_comment_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Revision_comment_AttrEClass(ISerializationContext context, Revision_comment_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_Revision_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_Revision_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_empty returns Revision
	 *
	 * Constraint:
	 *     {Revision}
	 */
	protected void sequence_Revision_empty(ISerializationContext context, Revision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_newVersion_AttrEClass returns Revision_newVersion_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Revision_newVersion_AttrEClass(ISerializationContext context, Revision_newVersion_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_oldVersion_AttrEClass returns Revision_oldVersion_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Revision_oldVersion_AttrEClass(ISerializationContext context, Revision_oldVersion_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_revisionDate_AttrEClass returns Revision_revisionDate_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'?)
	 */
	protected void sequence_Revision_revisionDate_AttrEClass(ISerializationContext context, Revision_revisionDate_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_Revision_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_Revision_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_RoleClassLib_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns RoleClassLib
	 *     CAEXObject_Type returns RoleClassLib
	 *     RoleClassLib_Type returns RoleClassLib
	 *     RootClass returns RoleClassLib
	 *     RoleClassLib returns RoleClassLib
	 *     RoleClassLib_body returns RoleClassLib
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             roleClass+=RoleClassLib_roleClass_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleClass+=RoleClassLib_roleClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleClass+=RoleClassLib_roleClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleClass+=RoleClassLib_roleClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_RoleClassLib_body_RoleClassLib_empty(ISerializationContext context, RoleClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_RoleClassLib_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_RoleClassLib_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib_empty returns RoleClassLib
	 *
	 * Constraint:
	 *     {RoleClassLib}
	 */
	protected void sequence_RoleClassLib_empty(ISerializationContext context, RoleClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_RoleClassLib_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib_roleClass_OrGroup returns RoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClass_Type containment+=RoleClass_Type*)?)
	 */
	protected void sequence_RoleClassLib_roleClass_OrGroup(ISerializationContext context, RoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_RoleClassLib_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_RoleClass_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_RoleClass_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_baseClass_OrGroup returns RoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClass_Type containment+=RoleClass_Type*)?)
	 */
	protected void sequence_RoleClass_baseClass_OrGroup(ISerializationContext context, RoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns RoleClass
	 *     CAEXObject_Type returns RoleClass
	 *     RoleClass_Type returns RoleClass
	 *     RootClass returns RoleClass
	 *     RoleClass returns RoleClass
	 *     RoleClass_body returns RoleClass
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             baseClass+=RoleClass_baseClass_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             attribute+=RoleClass_attribute_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             roleClass+=RoleClass_roleClass_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=RoleClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_RoleClass_body_RoleClass_empty(ISerializationContext context, RoleClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_RoleClass_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_RoleClass_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_empty returns RoleClass
	 *
	 * Constraint:
	 *     {RoleClass}
	 */
	protected void sequence_RoleClass_empty(ISerializationContext context, RoleClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_externalInterface_OrGroup returns ExternalInterface_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=ExternalInterface_Type containment+=ExternalInterface_Type*)?)
	 */
	protected void sequence_RoleClass_externalInterface_OrGroup(ISerializationContext context, ExternalInterface_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_refBaseClassPath_AttrEClass returns RoleClass_refBaseClassPath_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_RoleClass_refBaseClassPath_AttrEClass(ISerializationContext context, RoleClass_refBaseClassPath_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_RoleClass_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_roleClass_OrGroup returns RoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClass_Type containment+=RoleClass_Type*)?)
	 */
	protected void sequence_RoleClass_roleClass_OrGroup(ISerializationContext context, RoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_RoleClass_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_RoleFamily_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_RoleFamily_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_baseClass_OrGroup returns RoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClass_Type containment+=RoleClass_Type*)?)
	 */
	protected void sequence_RoleFamily_baseClass_OrGroup(ISerializationContext context, RoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns RoleFamily
	 *     CAEXObject_Type returns RoleFamily
	 *     RoleClass_Type returns RoleFamily
	 *     RoleFamily_Type returns RoleFamily
	 *     RootClass returns RoleFamily
	 *     RoleFamily returns RoleFamily
	 *     RoleFamily_body returns RoleFamily
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             baseClass+=RoleClass_baseClass_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             attribute+=RoleClass_attribute_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             roleClass+=RoleClass_roleClass_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=RoleClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     externalInterface+=RoleClass_externalInterface_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     baseClass+=RoleClass_baseClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     attribute+=RoleClass_attribute_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     roleClass+=RoleClass_roleClass_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_RoleFamily_body_RoleFamily_empty(ISerializationContext context, RoleFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_RoleFamily_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_RoleFamily_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_empty returns RoleFamily
	 *
	 * Constraint:
	 *     {RoleFamily}
	 */
	protected void sequence_RoleFamily_empty(ISerializationContext context, RoleFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_externalInterface_OrGroup returns ExternalInterface_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=ExternalInterface_Type containment+=ExternalInterface_Type*)?)
	 */
	protected void sequence_RoleFamily_externalInterface_OrGroup(ISerializationContext context, ExternalInterface_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_RoleFamily_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_roleClass_OrGroup returns RoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClass_Type containment+=RoleClass_Type*)?)
	 */
	protected void sequence_RoleFamily_roleClass_OrGroup(ISerializationContext context, RoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_RoleFamily_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_RoleRequirements_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_RoleRequirements_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns RoleRequirements
	 *     RoleRequirements_Type returns RoleRequirements
	 *     RootClass returns RoleRequirements
	 *     RoleRequirements returns RoleRequirements
	 *     RoleRequirements_body returns RoleRequirements
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             roleClass+=RoleRequirements_roleClass_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             mappingObject+=RoleRequirements_mappingObject_OrGroup | 
	 *             attribute+=RoleRequirements_attribute_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             externalInterface+=RoleRequirements_externalInterface_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *             (
	 *                 EvaluationOperator+=EvaluationOperator | 
	 *                 roleClass+=RoleRequirements_roleClass_OrGroup | 
	 *                 copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                 mappingObject+=RoleRequirements_mappingObject_OrGroup | 
	 *                 attribute+=RoleRequirements_attribute_OrGroup | 
	 *                 description+=CAEXBasicObject_description_OrGroup | 
	 *                 additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                 externalInterface+=RoleRequirements_externalInterface_OrGroup | 
	 *                 revision+=CAEXBasicObject_revision_OrGroup | 
	 *                 version+=CAEXBasicObject_version_OrGroup
	 *             )*
	 *         )?
	 *     )
	 */
	protected void sequence_RoleRequirements_body_RoleRequirements_empty(ISerializationContext context, RoleRequirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_RoleRequirements_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_RoleRequirements_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_empty returns RoleRequirements
	 *
	 * Constraint:
	 *     {RoleRequirements}
	 */
	protected void sequence_RoleRequirements_empty(ISerializationContext context, RoleRequirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_externalInterface_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_RoleRequirements_externalInterface_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_mappingObject_OrGroup returns Mapping_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Mapping_Type containment+=Mapping_Type*)?)
	 */
	protected void sequence_RoleRequirements_mappingObject_OrGroup(ISerializationContext context, Mapping_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_RoleRequirements_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_roleClass_OrGroup returns RoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClass_Type containment+=RoleClass_Type*)?)
	 */
	protected void sequence_RoleRequirements_roleClass_OrGroup(ISerializationContext context, RoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_RoleRequirements_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_Type returns SourceDocumentInformation
	 *     RootClass returns SourceDocumentInformation
	 *     SourceDocumentInformation returns SourceDocumentInformation
	 *     SourceDocumentInformation_body returns SourceDocumentInformation
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (
	 *             (originVendor_AttrEClass=SourceDocumentInformation_originVendor_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (originName_AttrEClass=SourceDocumentInformation_originName_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (originVendorURL_AttrEClass=SourceDocumentInformation_originVendorURL_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (lastWritingDateTime_AttrEClass=SourceDocumentInformation_lastWritingDateTime_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (originProjectTitle_AttrEClass=SourceDocumentInformation_originProjectTitle_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (originProjectID_AttrEClass=SourceDocumentInformation_originProjectID_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (originVersion_AttrEClass=SourceDocumentInformation_originVersion_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (originRelease_AttrEClass=SourceDocumentInformation_originRelease_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (originID_AttrEClass=SourceDocumentInformation_originID_AttrEClass EvaluationOperator+=EvaluationOperator*)
	 *         )*
	 *     )
	 */
	protected void sequence_SourceDocumentInformation_body_SourceDocumentInformation_empty(ISerializationContext context, SourceDocumentInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_empty returns SourceDocumentInformation
	 *
	 * Constraint:
	 *     {SourceDocumentInformation}
	 */
	protected void sequence_SourceDocumentInformation_empty(ISerializationContext context, SourceDocumentInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_lastWritingDateTime_AttrEClass returns SourceDocumentInformation_lastWritingDateTime_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'?)
	 */
	protected void sequence_SourceDocumentInformation_lastWritingDateTime_AttrEClass(ISerializationContext context, SourceDocumentInformation_lastWritingDateTime_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originID_AttrEClass returns SourceDocumentInformation_originID_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originID_AttrEClass(ISerializationContext context, SourceDocumentInformation_originID_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originName_AttrEClass returns SourceDocumentInformation_originName_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originName_AttrEClass(ISerializationContext context, SourceDocumentInformation_originName_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originProjectID_AttrEClass returns SourceDocumentInformation_originProjectID_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originProjectID_AttrEClass(ISerializationContext context, SourceDocumentInformation_originProjectID_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originProjectTitle_AttrEClass returns SourceDocumentInformation_originProjectTitle_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originProjectTitle_AttrEClass(ISerializationContext context, SourceDocumentInformation_originProjectTitle_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originRelease_AttrEClass returns SourceDocumentInformation_originRelease_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originRelease_AttrEClass(ISerializationContext context, SourceDocumentInformation_originRelease_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originVendorURL_AttrEClass returns SourceDocumentInformation_originVendorURL_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originVendorURL_AttrEClass(ISerializationContext context, SourceDocumentInformation_originVendorURL_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originVendor_AttrEClass returns SourceDocumentInformation_originVendor_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originVendor_AttrEClass(ISerializationContext context, SourceDocumentInformation_originVendor_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceDocumentInformation_originVersion_AttrEClass returns SourceDocumentInformation_originVersion_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SourceDocumentInformation_originVersion_AttrEClass(ISerializationContext context, SourceDocumentInformation_originVersion_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns String_And_BitOperator
	 *     String_BitOperator returns String_And_BitOperator
	 *     String_And_BitOperator returns String_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=String_ExpressionOperator connects+=String_ExpressionOperator+)
	 */
	protected void sequence_String_And_BitOperator(ISerializationContext context, String_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns String_CalculateableElementReferenceArgument
	 *     Calculateable_Argument returns String_CalculateableElementReferenceArgument
	 *     CalculateableElement_ReferenceArgument returns String_CalculateableElementReferenceArgument
	 *     String_CalculateableElementReferenceArgument returns String_CalculateableElementReferenceArgument
	 *
	 * Constraint:
	 *     (reference=[String_CalculateableElement|ID] operator=String_FunctionalOperator?)
	 */
	protected void sequence_String_CalculateableElementReferenceArgument(ISerializationContext context, String_CalculateableElementReferenceArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_CalculateableParameter returns String_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_String_CalculateableParameter(ISerializationContext context, String_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getString_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     String_FunctionalParameter returns String_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_String_FunctionalParameter(ISerializationContext context, String_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getString_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns String_Or_BitOperator
	 *     String_BitOperator returns String_Or_BitOperator
	 *     String_Or_BitOperator returns String_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=String_ExpressionOperator connects+=String_ExpressionOperator+)
	 */
	protected void sequence_String_Or_BitOperator(ISerializationContext context, String_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns String_PrimitiveArgument
	 *     PrimitiveArgument returns String_PrimitiveArgument
	 *     String_PrimitiveArgument returns String_PrimitiveArgument
	 *
	 * Constraint:
	 *     (value=STRING operator=String_FunctionalOperator?)
	 */
	protected void sequence_String_PrimitiveArgument(ISerializationContext context, String_PrimitiveArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Sum_AggregationOperator
	 *     Calculateable_Argument returns Sum_AggregationOperator
	 *     EvaluationOperation_Argument returns Sum_AggregationOperator
	 *     Integer_EvaluationOperation_Argument returns Sum_AggregationOperator
	 *     EvaluationOperator returns Sum_AggregationOperator
	 *     EvaluationFunctionalOperator returns Sum_AggregationOperator
	 *     AggregationOperator returns Sum_AggregationOperator
	 *     CalculatingAggregationOperator returns Sum_AggregationOperator
	 *     Sum_AggregationOperator returns Sum_AggregationOperator
	 *
	 * Constraint:
	 *     (calculateable=Integer_CalculateableParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Sum_AggregationOperator(ISerializationContext context, Sum_AggregationOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_SupportedRoleClass_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns SupportedRoleClass
	 *     SupportedRoleClass_Type returns SupportedRoleClass
	 *     RootClass returns SupportedRoleClass
	 *     SupportedRoleClass returns SupportedRoleClass
	 *     SupportedRoleClass_body returns SupportedRoleClass
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             roleClass+=SupportedRoleClass_roleClass_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             mappingObject+=SupportedRoleClass_mappingObject_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleClass+=SupportedRoleClass_roleClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     mappingObject+=SupportedRoleClass_mappingObject_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refRoleClassPath_AttrEClass=SupportedRoleClass_refRoleClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     roleClass+=SupportedRoleClass_roleClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     mappingObject+=SupportedRoleClass_mappingObject_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_SupportedRoleClass_body_SupportedRoleClass_empty(ISerializationContext context, SupportedRoleClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_SupportedRoleClass_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_SupportedRoleClass_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_empty returns SupportedRoleClass
	 *
	 * Constraint:
	 *     {SupportedRoleClass}
	 */
	protected void sequence_SupportedRoleClass_empty(ISerializationContext context, SupportedRoleClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_mappingObject_OrGroup returns Mapping_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Mapping_Type containment+=Mapping_Type*)?)
	 */
	protected void sequence_SupportedRoleClass_mappingObject_OrGroup(ISerializationContext context, Mapping_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_refRoleClassPath_AttrEClass returns SupportedRoleClass_refRoleClassPath_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SupportedRoleClass_refRoleClassPath_AttrEClass(ISerializationContext context, SupportedRoleClass_refRoleClassPath_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_SupportedRoleClass_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_roleClass_OrGroup returns RoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=RoleClass_Type containment+=RoleClass_Type*)?)
	 */
	protected void sequence_SupportedRoleClass_roleClass_OrGroup(ISerializationContext context, RoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_SupportedRoleClass_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_SystemUnitClassLib_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns SystemUnitClassLib
	 *     CAEXObject_Type returns SystemUnitClassLib
	 *     SystemUnitClassLib_Type returns SystemUnitClassLib
	 *     RootClass returns SystemUnitClassLib
	 *     SystemUnitClassLib returns SystemUnitClassLib
	 *     SystemUnitClassLib_body returns SystemUnitClassLib
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             systemUnitClass+=SystemUnitClassLib_systemUnitClass_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClassLib_systemUnitClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClassLib_systemUnitClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClassLib_systemUnitClass_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_SystemUnitClassLib_body_SystemUnitClassLib_empty(ISerializationContext context, SystemUnitClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_SystemUnitClassLib_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_SystemUnitClassLib_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib_empty returns SystemUnitClassLib
	 *
	 * Constraint:
	 *     {SystemUnitClassLib}
	 */
	protected void sequence_SystemUnitClassLib_empty(ISerializationContext context, SystemUnitClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_SystemUnitClassLib_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib_systemUnitClass_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_SystemUnitClassLib_systemUnitClass_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_SystemUnitClassLib_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_SystemUnitClass_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_SystemUnitClass_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_baseClass_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_SystemUnitClass_baseClass_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns SystemUnitClass
	 *     CAEXObject_Type returns SystemUnitClass
	 *     SystemUnitClass_Type returns SystemUnitClass
	 *     RootClass returns SystemUnitClass
	 *     SystemUnitClass returns SystemUnitClass
	 *     SystemUnitClass_body returns SystemUnitClass
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *             baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             attribute+=SystemUnitClass_attribute_OrGroup | 
	 *             externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *             systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=SystemUnitClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_SystemUnitClass_body_SystemUnitClass_empty(ISerializationContext context, SystemUnitClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_SystemUnitClass_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_SystemUnitClass_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_empty returns SystemUnitClass
	 *
	 * Constraint:
	 *     {SystemUnitClass}
	 */
	protected void sequence_SystemUnitClass_empty(ISerializationContext context, SystemUnitClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_externalInterface_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_SystemUnitClass_externalInterface_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_internalElement_OrGroup returns InternalElement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InternalElement_Type containment+=InternalElement_Type*)?)
	 */
	protected void sequence_SystemUnitClass_internalElement_OrGroup(ISerializationContext context, InternalElement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_internalLink_OrGroup returns InternalLink_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InternalLink_Type containment+=InternalLink_Type*)?)
	 */
	protected void sequence_SystemUnitClass_internalLink_OrGroup(ISerializationContext context, InternalLink_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_refBaseClassPath_AttrEClass returns SystemUnitClass_refBaseClassPath_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_SystemUnitClass_refBaseClassPath_AttrEClass(ISerializationContext context, SystemUnitClass_refBaseClassPath_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_SystemUnitClass_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_supportedRoleClass_OrGroup returns SupportedRoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SupportedRoleClass_Type containment+=SupportedRoleClass_Type*)?)
	 */
	protected void sequence_SystemUnitClass_supportedRoleClass_OrGroup(ISerializationContext context, SupportedRoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_systemUnitClass_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_SystemUnitClass_systemUnitClass_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_SystemUnitClass_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_additionalInformation_OrGroup returns AdditionalInformation_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=AdditionalInformation_Type containment+=AdditionalInformation_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_additionalInformation_OrGroup(ISerializationContext context, AdditionalInformation_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_attribute_OrGroup returns Attribute_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Attribute_Type containment+=Attribute_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_attribute_OrGroup(ISerializationContext context, Attribute_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_baseClass_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_baseClass_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXBasicObject_Type returns SystemUnitFamily
	 *     CAEXObject_Type returns SystemUnitFamily
	 *     SystemUnitFamily_Type returns SystemUnitFamily
	 *     SystemUnitClass_Type returns SystemUnitFamily
	 *     RootClass returns SystemUnitFamily
	 *     SystemUnitFamily returns SystemUnitFamily
	 *     SystemUnitFamily_body returns SystemUnitFamily
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *             copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *             description+=CAEXBasicObject_description_OrGroup | 
	 *             internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *             baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *             additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *             revision+=CAEXBasicObject_revision_OrGroup | 
	 *             attribute+=SystemUnitClass_attribute_OrGroup | 
	 *             externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *             version+=CAEXBasicObject_version_OrGroup | 
	 *             internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *             systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *         )* 
	 *         (
	 *             (
	 *                 iD_AttrEClass=CAEXObject_iD_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 name_AttrEClass=CAEXObject_name_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 refBaseClassPath_AttrEClass=SystemUnitClass_refBaseClassPath_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             ) | 
	 *             (
	 *                 changeMode_AttrEClass=CAEXBasicObject_changeMode_AttrEClass 
	 *                 (
	 *                     EvaluationOperator+=EvaluationOperator | 
	 *                     supportedRoleClass+=SystemUnitClass_supportedRoleClass_OrGroup | 
	 *                     copyright+=CAEXBasicObject_copyright_OrGroup | 
	 *                     description+=CAEXBasicObject_description_OrGroup | 
	 *                     internalLink+=SystemUnitClass_internalLink_OrGroup | 
	 *                     baseClass+=SystemUnitClass_baseClass_OrGroup | 
	 *                     additionalInformation+=CAEXBasicObject_additionalInformation_OrGroup | 
	 *                     revision+=CAEXBasicObject_revision_OrGroup | 
	 *                     attribute+=SystemUnitClass_attribute_OrGroup | 
	 *                     externalInterface+=SystemUnitClass_externalInterface_OrGroup | 
	 *                     version+=CAEXBasicObject_version_OrGroup | 
	 *                     internalElement+=SystemUnitClass_internalElement_OrGroup | 
	 *                     systemUnitClass+=SystemUnitClass_systemUnitClass_OrGroup
	 *                 )*
	 *             )
	 *         )*
	 *     )
	 */
	protected void sequence_SystemUnitFamily_body_SystemUnitFamily_empty(ISerializationContext context, SystemUnitFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_copyright_OrGroup returns Copyright_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Copyright_Type containment+=Copyright_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_copyright_OrGroup(ISerializationContext context, Copyright_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_description_OrGroup returns Description_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Description_Type containment+=Description_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_description_OrGroup(ISerializationContext context, Description_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_empty returns SystemUnitFamily
	 *
	 * Constraint:
	 *     {SystemUnitFamily}
	 */
	protected void sequence_SystemUnitFamily_empty(ISerializationContext context, SystemUnitFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_externalInterface_OrGroup returns InterfaceClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InterfaceClass_Type containment+=InterfaceClass_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_externalInterface_OrGroup(ISerializationContext context, InterfaceClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_internalElement_OrGroup returns InternalElement_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InternalElement_Type containment+=InternalElement_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_internalElement_OrGroup(ISerializationContext context, InternalElement_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_internalLink_OrGroup returns InternalLink_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=InternalLink_Type containment+=InternalLink_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_internalLink_OrGroup(ISerializationContext context, InternalLink_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_revision_OrGroup returns Revision_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Revision_Type containment+=Revision_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_revision_OrGroup(ISerializationContext context, Revision_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_supportedRoleClass_OrGroup returns SupportedRoleClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SupportedRoleClass_Type containment+=SupportedRoleClass_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_supportedRoleClass_OrGroup(ISerializationContext context, SupportedRoleClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_systemUnitClass_OrGroup returns SystemUnitClass_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=SystemUnitClass_Type containment+=SystemUnitClass_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_systemUnitClass_OrGroup(ISerializationContext context, SystemUnitClass_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily_version_OrGroup returns Version_OrGroup
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? transitive?='+'? (containment+=Version_Type containment+=Version_Type*)?)
	 */
	protected void sequence_SystemUnitFamily_version_OrGroup(ISerializationContext context, Version_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnknownType_Type returns UnknownType
	 *     RootClass returns UnknownType
	 *     UnknownType returns UnknownType
	 *     UnknownType_body returns UnknownType
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (requirements_AttrEClass=UnknownType_requirements_AttrEClass EvaluationOperator+=EvaluationOperator*)?
	 *     )
	 */
	protected void sequence_UnknownType_body_UnknownType_empty(ISerializationContext context, UnknownType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnknownType_empty returns UnknownType
	 *
	 * Constraint:
	 *     {UnknownType}
	 */
	protected void sequence_UnknownType_empty(ISerializationContext context, UnknownType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnknownType_requirements_AttrEClass returns UnknownType_requirements_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_UnknownType_requirements_AttrEClass(ISerializationContext context, UnknownType_requirements_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Version_Type returns Version
	 *     RootClass returns Version
	 *     Version returns Version
	 *     Version_body returns Version
	 *
	 * Constraint:
	 *     (
	 *         EvaluationOperator+=EvaluationOperator* 
	 *         (
	 *             (changeMode_AttrEClass=Version_changeMode_AttrEClass EvaluationOperator+=EvaluationOperator*) | 
	 *             (value_AttrEClass=Version_value_AttrEClass EvaluationOperator+=EvaluationOperator*)
	 *         )*
	 *     )
	 */
	protected void sequence_Version_body_Version_empty(ISerializationContext context, Version semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Version_changeMode_AttrEClass returns Version_changeMode_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=ChangeMode_EnumerationOperator?)
	 */
	protected void sequence_Version_changeMode_AttrEClass(ISerializationContext context, Version_changeMode_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Version_empty returns Version
	 *
	 * Constraint:
	 *     {Version}
	 */
	protected void sequence_Version_empty(ISerializationContext context, Version semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Version_value_AttrEClass returns Version_value_AttrEClass
	 *
	 * Constraint:
	 *     (name=ID negated?='!'? operator=String_ExpressionOperator?)
	 */
	protected void sequence_Version_value_AttrEClass(ISerializationContext context, Version_value_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns charAt_FunctionalOperator
	 *     Character_FunctionalOperator_Begin returns charAt_FunctionalOperator
	 *     Character_FunctionalOperator returns charAt_FunctionalOperator
	 *     charAt_FunctionalOperator returns charAt_FunctionalOperator
	 *
	 * Constraint:
	 *     (i=Integer_FunctionalParameter operator=Character_FunctionalOperator?)
	 */
	protected void sequence_charAt_FunctionalOperator(ISerializationContext context, charAt_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns compareTo_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns compareTo_FunctionalOperator
	 *     Boolean_FunctionalOperator returns compareTo_FunctionalOperator
	 *     compareTo_FunctionalOperator returns compareTo_FunctionalOperator
	 *
	 * Constraint:
	 *     (b=Boolean_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_compareTo_FunctionalOperator(ISerializationContext context, compareTo_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns concat_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns concat_FunctionalOperator
	 *     String_FunctionalOperator returns concat_FunctionalOperator
	 *     concat_FunctionalOperator returns concat_FunctionalOperator
	 *
	 * Constraint:
	 *     (str=String_FunctionalParameter operator=String_FunctionalOperator?)
	 */
	protected void sequence_concat_FunctionalOperator(ISerializationContext context, concat_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns contains_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns contains_FunctionalOperator
	 *     String_FunctionalOperator returns contains_FunctionalOperator
	 *     contains_FunctionalOperator returns contains_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? charSequence=CharSequence_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_contains_FunctionalOperator(ISerializationContext context, contains_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns endsWith_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns endsWith_FunctionalOperator
	 *     String_FunctionalOperator returns endsWith_FunctionalOperator
	 *     endsWith_FunctionalOperator returns endsWith_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? suffix=String_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_endsWith_FunctionalOperator(ISerializationContext context, endsWith_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns equalsIgnoreCase_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns equalsIgnoreCase_FunctionalOperator
	 *     String_FunctionalOperator returns equalsIgnoreCase_FunctionalOperator
	 *     equalsIgnoreCase_FunctionalOperator returns equalsIgnoreCase_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? anotherString=String_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_equalsIgnoreCase_FunctionalOperator(ISerializationContext context, equalsIgnoreCase_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns equals_FunctionalOperator
	 *     Object_FunctionalOperator_Begin returns equals_FunctionalOperator
	 *     Object_FunctionalOperator returns equals_FunctionalOperator
	 *     equals_FunctionalOperator returns equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_equals_FunctionalOperator(ISerializationContext context, equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns greaterEquals_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns greaterEquals_FunctionalOperator
	 *     Number_FunctionalOperator returns greaterEquals_FunctionalOperator
	 *     greaterEquals_FunctionalOperator returns greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_greaterEquals_FunctionalOperator(ISerializationContext context, greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns greaterThan_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns greaterThan_FunctionalOperator
	 *     Number_FunctionalOperator returns greaterThan_FunctionalOperator
	 *     greaterThan_FunctionalOperator returns greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_greaterThan_FunctionalOperator(ISerializationContext context, greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns indexOfString_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns indexOfString_FunctionalOperator
	 *     String_FunctionalOperator returns indexOfString_FunctionalOperator
	 *     indexOfString_FunctionalOperator returns indexOfString_FunctionalOperator
	 *
	 * Constraint:
	 *     (str=String_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_indexOfString_FunctionalOperator(ISerializationContext context, indexOfString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns isEmpty_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns isEmpty_FunctionalOperator
	 *     String_FunctionalOperator returns isEmpty_FunctionalOperator
	 *     isEmpty_FunctionalOperator returns isEmpty_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_isEmpty_FunctionalOperator(ISerializationContext context, isEmpty_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns length_FunctionalOperator
	 *     CharSequence_FunctionalOperator_Begin returns length_FunctionalOperator
	 *     CharSequence_FunctionalOperator returns length_FunctionalOperator
	 *     length_FunctionalOperator returns length_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_length_FunctionalOperator(ISerializationContext context, length_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns parseBoolean_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns parseBoolean_FunctionalOperator
	 *     Boolean_FunctionalOperator returns parseBoolean_FunctionalOperator
	 *     parseBoolean_FunctionalOperator returns parseBoolean_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? s=String_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_parseBoolean_FunctionalOperator(ISerializationContext context, parseBoolean_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns smallerEquals_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns smallerEquals_FunctionalOperator
	 *     Number_FunctionalOperator returns smallerEquals_FunctionalOperator
	 *     smallerEquals_FunctionalOperator returns smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_smallerEquals_FunctionalOperator(ISerializationContext context, smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns smallerThan_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns smallerThan_FunctionalOperator
	 *     Number_FunctionalOperator returns smallerThan_FunctionalOperator
	 *     smallerThan_FunctionalOperator returns smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_smallerThan_FunctionalOperator(ISerializationContext context, smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns substring_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns substring_FunctionalOperator
	 *     String_FunctionalOperator returns substring_FunctionalOperator
	 *     substring_FunctionalOperator returns substring_FunctionalOperator
	 *
	 * Constraint:
	 *     (startIndex=Integer_FunctionalParameter endIndex=Integer_FunctionalParameter operator=String_FunctionalOperator?)
	 */
	protected void sequence_substring_FunctionalOperator(ISerializationContext context, substring_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns toString_FunctionalOperator
	 *     Object_FunctionalOperator_Begin returns toString_FunctionalOperator
	 *     Object_FunctionalOperator returns toString_FunctionalOperator
	 *     toString_FunctionalOperator returns toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_toString_FunctionalOperator(ISerializationContext context, toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
