/*
 * generated by Xtext 2.14.0
 */
package org.xtext.validation

import org.eclipse.xtext.validation.Check
import org.eclipse.xtend.lib.macro.declaration.NamedElement
import qmm.QmmPackage
import qmm.AttributeEClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtend.typesystem.emf.EcoreUtil2
import qmm.RootClass
import qmm.CAEXObject_name_AttrEClass

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MQLValidator extends AbstractMQLValidator {
	/* 
	//ONLY FOR TESTING!!!
	@Check
	def void checkNameStartsWithCapital(AttributeEClass attributeEClass) {
		System.out.println("checkNameStartsWithCapital(AttributeEClass attributeEClass): attributeEClass: " +
			attributeEClass)

		val containingRootClass = getContainingRootClass(attributeEClass)
		if(countNameAttributesOfRootClass(containingRootClass) > 2){
			error("More than 2 elements of CAEXObject_name_AttrEClass contained by this RootClass!", QmmPackage.eINSTANCE.namedElement_Name);
		}
	}
	
	private def RootClass getContainingRootClass(EObject eo){
		var container = eo.eContainer
		while(container !== null){
			if(container instanceof RootClass) return container as RootClass;
			container = container.eContainer;
		}
		return null;
	}
	
	//only for test
	private def int countNameAttributesOfRootClass(RootClass rc){
		var counter = 0;
		for(EObject eo: rc.eContents){
			if(eo instanceof CAEXObject_name_AttrEClass) counter++;
		}
		
		return counter;
	}
	*/
}
