/**
 * This is a copyright text.
 */
package qmm;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Attribute</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link qmm.Attribute#getRefSemantic <em>Ref Semantic</em>}</li>
 *   <li>{@link qmm.Attribute#getConstraint <em>Constraint</em>}</li>
 *   <li>{@link qmm.Attribute#getAttribute <em>Attribute</em>}</li>
 *   <li>{@link qmm.Attribute#getDefaultValue_AttrEClass <em>Default Value Attr EClass</em>}</li>
 *   <li>{@link qmm.Attribute#getValue_AttrEClass <em>Value Attr EClass</em>}</li>
 *   <li>{@link qmm.Attribute#getAttributeDataType_AttrEClass <em>Attribute Data Type Attr EClass</em>}</li>
 *   <li>{@link qmm.Attribute#getRefAttributeType_AttrEClass <em>Ref Attribute Type Attr EClass</em>}</li>
 *   <li>{@link qmm.Attribute#getUnit_AttrEClass <em>Unit Attr EClass</em>}</li>
 * </ul>
 *
 * @see qmm.qmmPackage#getAttribute()
 * @model
 * @generated
 */
public interface Attribute extends CAEXObject, RootClass {
	/**
	 * Returns the value of the '<em><b>Ref Semantic</b></em>' containment reference list.
	 * The list contents are of type {@link qmm.RefSemantic_OrGroup}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Ref Semantic</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Ref Semantic</em>' containment reference list.
	 * @see qmm.qmmPackage#getAttribute_RefSemantic()
	 * @model containment="true"
	 * @generated
	 */
	EList<RefSemantic_OrGroup> getRefSemantic();

	/**
	 * Returns the value of the '<em><b>Constraint</b></em>' containment reference list.
	 * The list contents are of type {@link qmm.AttributeValueRequirement_OrGroup}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Constraint</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Constraint</em>' containment reference list.
	 * @see qmm.qmmPackage#getAttribute_Constraint()
	 * @model containment="true"
	 * @generated
	 */
	EList<AttributeValueRequirement_OrGroup> getConstraint();

	/**
	 * Returns the value of the '<em><b>Attribute</b></em>' containment reference list.
	 * The list contents are of type {@link qmm.Attribute_OrGroup}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Attribute</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Attribute</em>' containment reference list.
	 * @see qmm.qmmPackage#getAttribute_Attribute()
	 * @model containment="true"
	 * @generated
	 */
	EList<Attribute_OrGroup> getAttribute();

	/**
	 * Returns the value of the '<em><b>Default Value Attr EClass</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Default Value Attr EClass</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Default Value Attr EClass</em>' containment reference.
	 * @see #setDefaultValue_AttrEClass(Attribute_defaultValue_AttrEClass)
	 * @see qmm.qmmPackage#getAttribute_DefaultValue_AttrEClass()
	 * @model containment="true" resolveProxies="true"
	 * @generated
	 */
	Attribute_defaultValue_AttrEClass getDefaultValue_AttrEClass();

	/**
	 * Sets the value of the '{@link qmm.Attribute#getDefaultValue_AttrEClass <em>Default Value Attr EClass</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Default Value Attr EClass</em>' containment reference.
	 * @see #getDefaultValue_AttrEClass()
	 * @generated
	 */
	void setDefaultValue_AttrEClass(Attribute_defaultValue_AttrEClass value);

	/**
	 * Returns the value of the '<em><b>Value Attr EClass</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Value Attr EClass</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Value Attr EClass</em>' containment reference.
	 * @see #setValue_AttrEClass(Attribute_value_AttrEClass)
	 * @see qmm.qmmPackage#getAttribute_Value_AttrEClass()
	 * @model containment="true" resolveProxies="true"
	 * @generated
	 */
	Attribute_value_AttrEClass getValue_AttrEClass();

	/**
	 * Sets the value of the '{@link qmm.Attribute#getValue_AttrEClass <em>Value Attr EClass</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Value Attr EClass</em>' containment reference.
	 * @see #getValue_AttrEClass()
	 * @generated
	 */
	void setValue_AttrEClass(Attribute_value_AttrEClass value);

	/**
	 * Returns the value of the '<em><b>Attribute Data Type Attr EClass</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Attribute Data Type Attr EClass</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Attribute Data Type Attr EClass</em>' containment reference.
	 * @see #setAttributeDataType_AttrEClass(Attribute_attributeDataType_AttrEClass)
	 * @see qmm.qmmPackage#getAttribute_AttributeDataType_AttrEClass()
	 * @model containment="true" resolveProxies="true"
	 * @generated
	 */
	Attribute_attributeDataType_AttrEClass getAttributeDataType_AttrEClass();

	/**
	 * Sets the value of the '{@link qmm.Attribute#getAttributeDataType_AttrEClass <em>Attribute Data Type Attr EClass</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Attribute Data Type Attr EClass</em>' containment reference.
	 * @see #getAttributeDataType_AttrEClass()
	 * @generated
	 */
	void setAttributeDataType_AttrEClass(Attribute_attributeDataType_AttrEClass value);

	/**
	 * Returns the value of the '<em><b>Ref Attribute Type Attr EClass</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Ref Attribute Type Attr EClass</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Ref Attribute Type Attr EClass</em>' containment reference.
	 * @see #setRefAttributeType_AttrEClass(Attribute_refAttributeType_AttrEClass)
	 * @see qmm.qmmPackage#getAttribute_RefAttributeType_AttrEClass()
	 * @model containment="true" resolveProxies="true"
	 * @generated
	 */
	Attribute_refAttributeType_AttrEClass getRefAttributeType_AttrEClass();

	/**
	 * Sets the value of the '{@link qmm.Attribute#getRefAttributeType_AttrEClass <em>Ref Attribute Type Attr EClass</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Ref Attribute Type Attr EClass</em>' containment reference.
	 * @see #getRefAttributeType_AttrEClass()
	 * @generated
	 */
	void setRefAttributeType_AttrEClass(Attribute_refAttributeType_AttrEClass value);

	/**
	 * Returns the value of the '<em><b>Unit Attr EClass</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Unit Attr EClass</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Unit Attr EClass</em>' containment reference.
	 * @see #setUnit_AttrEClass(Attribute_unit_AttrEClass)
	 * @see qmm.qmmPackage#getAttribute_Unit_AttrEClass()
	 * @model containment="true" resolveProxies="true"
	 * @generated
	 */
	Attribute_unit_AttrEClass getUnit_AttrEClass();

	/**
	 * Sets the value of the '{@link qmm.Attribute#getUnit_AttrEClass <em>Unit Attr EClass</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Unit Attr EClass</em>' containment reference.
	 * @see #getUnit_AttrEClass()
	 * @generated
	 */
	void setUnit_AttrEClass(Attribute_unit_AttrEClass value);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model required="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='if(diagnostic!=null){\n    if(this.evaluationOperator != null){\n    \tEList<org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateCheckExpression(this.evaluationOperator);\n    \tfor(int i=0; i<diagnosticList.size(); i++){\n    \t\tdiagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));\n    \t}\n    }\n}\n\nfinal int refSemantic_upperBound = -1;\nint nr_nonTransitive_refSemantic = 0;\nif(this.refSemantic != null){\n\t\tfor(qmm.OrGroup og : this.refSemantic) if(!og.isTransitive()) nr_nonTransitive_refSemantic++;\n}\nif(nr_nonTransitive_refSemantic > refSemantic_upperBound && refSemantic_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.qmmValidator.DIAGNOSTIC_SOURCE,qmm.util.qmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, \"EClass contains \" + nr_nonTransitive_refSemantic + \" non-transitive refSemantic. Only \" + refSemantic_upperBound + \" are allowed.\",new Object[] { this }));\n\nfinal int constraint_upperBound = -1;\nint nr_nonTransitive_constraint = 0;\nif(this.constraint != null){\n\t\tfor(qmm.OrGroup og : this.constraint) if(!og.isTransitive()) nr_nonTransitive_constraint++;\n}\nif(nr_nonTransitive_constraint > constraint_upperBound && constraint_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.qmmValidator.DIAGNOSTIC_SOURCE,qmm.util.qmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, \"EClass contains \" + nr_nonTransitive_constraint + \" non-transitive constraint. Only \" + constraint_upperBound + \" are allowed.\",new Object[] { this }));\n\nfinal int attribute_upperBound = -1;\nint nr_nonTransitive_attribute = 0;\nif(this.attribute != null){\n\t\tfor(qmm.OrGroup og : this.attribute) if(!og.isTransitive()) nr_nonTransitive_attribute++;\n}\nif(nr_nonTransitive_attribute > attribute_upperBound && attribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.qmmValidator.DIAGNOSTIC_SOURCE,qmm.util.qmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, \"EClass contains \" + nr_nonTransitive_attribute + \" non-transitive attribute. Only \" + attribute_upperBound + \" are allowed.\",new Object[] { this }));\n\nreturn true;'"
	 * @generated
	 */
	boolean validate(DiagnosticChain diagnostic, Map context);

} // Attribute
